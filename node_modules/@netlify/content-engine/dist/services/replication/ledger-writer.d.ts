export type LedgerAction = {
    type: string;
    payload: any;
    plugin?: {
        name: string;
    };
};
export declare class LedgerWriter {
    private actionCount;
    private serverUrl;
    private ledgerId;
    private blockVersionId?;
    private configurationId?;
    private actionsToWatch;
    private actionsBeingWatched;
    private cacheId?;
    private headers?;
    private streamStarted;
    private streamEnded;
    private writeQueue;
    private stream;
    private streamPipeline?;
    constructor(input: {
        serverUrl: string;
        ledgerId: string;
        actionsToWatch: string[];
    });
    private watchActions;
    openStream(input: {
        blockVersionId: string;
        cacheId: string;
        directory: string;
        platformId?: string;
        headers?: Record<string, string>;
    }): Promise<void>;
    finalizeStream(): Promise<{
        actionCount: number;
        configurationId: string | undefined;
    }>;
    private sharedActionError;
    private writeAction;
    private makeStreamPipeline;
    private makeHttpStream;
    private waitForQueueIdle;
    private writeStartSequenceAction;
    private writeEndSequenceAction;
    private handleQueuedAction;
    private logLedgerAction;
}
//# sourceMappingURL=ledger-writer.d.ts.map