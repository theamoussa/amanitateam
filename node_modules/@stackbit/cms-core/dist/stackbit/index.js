"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchAndConvertSchema = void 0;
const lodash_1 = __importDefault(require("lodash"));
const sdk_1 = require("@stackbit/sdk");
function fetchAndConvertSchema(options) {
    return (0, sdk_1.loadConfigWithModelsPresetsAndValidate)({ dirPath: options.dirPath }).then(({ config, errors }) => {
        if (!config) {
            return { schema: {}, errors };
        }
        wrapListDataModels(config);
        const schema = lodash_1.default.pick(config, [
            'stackbitVersion',
            'ssgName',
            'ssgVersion',
            'nodeVersion',
            'devCommand',
            'cmsName',
            'import',
            'publishDir',
            'staticDir',
            'uploadDir',
            'assets',
            'dataDir',
            'pagesDir',
            'pageLayoutKey',
            'objectTypeKey',
            'excludePages',
            'logicFields',
            'contentModels',
            'presetSource',
            'modelsSource',
            'models',
            'presets',
            'dirPath',
            'filePath',
            'sidebarButtons'
        ]);
        return { schema, errors };
    });
}
exports.fetchAndConvertSchema = fetchAndConvertSchema;
function wrapListDataModels(config) {
    lodash_1.default.forEach(config.models, (model) => {
        if (!(0, sdk_1.isListDataModel)(model)) {
            return;
        }
        lodash_1.default.set(model, 'fields', [
            {
                type: 'list',
                name: 'items',
                items: model.items
            }
        ]);
        lodash_1.default.unset(model, 'items');
    });
}
//# sourceMappingURL=index.js.map