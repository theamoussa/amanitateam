import { Config } from '@stackbit/sdk';
import * as StackbitTypes from '@stackbit/types';
import type { ReturnTypeOfCSIMethod } from '@stackbit/types';
import * as ContentStoreTypes from '../types';
import type { ContentSourceData } from '../types';
import type { BackCompatContentSourceInterface } from './backward-compatibility';
export interface DocumentHookBaseOptions {
    stackbitConfig: Config | null;
    contentSourceData: ContentSourceData;
    getContentSourceDataById: () => Record<string, ContentStoreTypes.ContentSourceData>;
    user?: ContentStoreTypes.User;
    logger: StackbitTypes.Logger;
}
export interface DocumentHookOptions<Action extends 'createDocument' | 'updateDocument' | 'deleteDocument' | 'publishDocuments' | 'unpublishDocuments' | 'archiveDocument' | 'unarchiveDocument'> extends DocumentHookBaseOptions {
    actionOptions: Parameters<NonNullable<BackCompatContentSourceInterface[Action]>>[0];
}
export declare function createDocumentHooked(options: DocumentHookOptions<'createDocument'>): ReturnTypeOfCSIMethod<'createDocument'>;
export declare function updateDocumentHooked(options: DocumentHookOptions<'updateDocument'>): ReturnTypeOfCSIMethod<'updateDocument'>;
export declare function deleteDocumentHooked(options: DocumentHookOptions<'deleteDocument'>): ReturnTypeOfCSIMethod<'deleteDocument'>;
export declare function publishDocumentHooked(options: DocumentHookOptions<'publishDocuments'>): ReturnTypeOfCSIMethod<'publishDocuments'>;
export declare function unpublishDocumentHooked(options: DocumentHookOptions<'unpublishDocuments'>): ReturnTypeOfCSIMethod<'unpublishDocuments'>;
export declare function archiveDocumentHooked(options: DocumentHookOptions<'archiveDocument'>): ReturnTypeOfCSIMethod<'archiveDocument'>;
export declare function unarchiveDocumentHooked(options: DocumentHookOptions<'unarchiveDocument'>): ReturnTypeOfCSIMethod<'unarchiveDocument'>;
export declare function getContentSourceActionsForSourceThunk({ getContentSourceDataById, logger, user, stackbitConfig }: {
    getContentSourceDataById: () => Record<string, ContentStoreTypes.ContentSourceData>;
    logger: StackbitTypes.Logger;
    user?: ContentStoreTypes.User;
    stackbitConfig: Config | null;
}): (options: {
    srcType: string;
    srcProjectId?: string;
}) => StackbitTypes.ContentSourceActions | undefined;
//# sourceMappingURL=document-hooks.d.ts.map