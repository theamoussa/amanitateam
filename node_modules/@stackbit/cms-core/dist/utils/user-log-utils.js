"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logUploadAssets = exports.logDuplicateDocument = exports.logUpdateAsset = exports.logUpdateDocument = exports.logDocumentsEvent = exports.logDocumentEvent = exports.logCreateDocument = exports.pluralize = void 0;
function pluralize(str, count) {
    return count === 1 ? str : `${str}s`;
}
exports.pluralize = pluralize;
function encodeIdentifier(options) {
    const { srcType, srcProjectId, srcDocumentId, locale } = options;
    const localeSuffix = locale ? `:${locale}` : '';
    return `(${srcType || ''}${srcProjectId ? `:${srcProjectId}` : ''}${srcDocumentId ? `:${srcDocumentId}` : ''}${localeSuffix})`;
}
function logCreateDocument(options) {
    const { userLogger, srcType, srcProjectId, modelName, locale } = options;
    userLogger.info(`Create document for ${modelName} ${encodeIdentifier({ srcType, srcProjectId, locale })}`);
}
exports.logCreateDocument = logCreateDocument;
function logDocumentEvent(event, options) {
    const { userLogger, srcType, srcProjectId, srcDocumentId, locale } = options;
    userLogger.info(`${event} document ${encodeIdentifier({ srcType, srcProjectId, srcDocumentId, locale })}`);
}
exports.logDocumentEvent = logDocumentEvent;
function logDocumentsEvent(event, options) {
    const { userLogger, objects, locale } = options;
    const objectCount = objects.length;
    const objectPlural = pluralize('item', objectCount);
    userLogger.info(`${event} ${objectCount} ${objectPlural}: ${objects.map((object) => object.srcObjectId).join(', ')} ${objects
        .map((object) => encodeIdentifier({ srcType: object.srcType, srcProjectId: object.srcProjectId, locale }))
        .join(', ')}`);
}
exports.logDocumentsEvent = logDocumentsEvent;
function logUpdateDocument(options) {
    const { userLogger, srcType, srcProjectId, srcDocumentId, updateOperations, locale } = options;
    const updates = updateOperations.map((update) => `${update.opType.toUpperCase()} ${update.fieldPath.join('.')}`).join(', ');
    userLogger.info(`Update document ${updates} ${encodeIdentifier({ srcType, srcProjectId, srcDocumentId, locale })}`);
}
exports.logUpdateDocument = logUpdateDocument;
function logUpdateAsset(options) {
    const { userLogger, srcType, srcProjectId, srcAssetId, updateOperations, locale } = options;
    const updates = updateOperations.map((update) => `${update.opType.toUpperCase()} ${update.fieldPath.join('.')}`).join(', ');
    userLogger.info(`Update asset ${updates} ${encodeIdentifier({ srcType, srcProjectId, srcDocumentId: srcAssetId, locale })}`);
}
exports.logUpdateAsset = logUpdateAsset;
function logDuplicateDocument(options) {
    const { userLogger, srcType, srcProjectId, srcDocumentId, locale } = options;
    userLogger.info(`Duplicate document ${encodeIdentifier({ srcType, srcProjectId, srcDocumentId, locale })}`);
}
exports.logDuplicateDocument = logDuplicateDocument;
function logUploadAssets(options) {
    const { userLogger, srcType, srcProjectId, locale } = options;
    userLogger.info(`Upload asset ${encodeIdentifier({ srcType, srcProjectId, locale })}`);
}
exports.logUploadAssets = logUploadAssets;
//# sourceMappingURL=user-log-utils.js.map