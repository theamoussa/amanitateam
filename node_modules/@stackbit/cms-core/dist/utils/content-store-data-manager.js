"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.syncContentSource = exports.updateProvisionalDataFromContentSource = void 0;
const lodash_1 = __importDefault(require("lodash"));
const utils_1 = require("@stackbit/utils");
async function updateProvisionalDataFromContentSource({ contentSourceInstance, csiModelMap, provisionalData }) {
    const syncContext = {};
    const getDocumentsRes = await contentSourceInstance.getDocuments({
        modelMap: csiModelMap,
        syncContext: provisionalData.syncContext?.documentsSyncContext
    });
    const { csiDocuments, csiDocumentMap, documentsSyncContext } = Array.isArray(getDocumentsRes)
        ? { csiDocuments: getDocumentsRes, csiDocumentMap: lodash_1.default.keyBy(getDocumentsRes, 'id'), documentsSyncContext: undefined }
        : {
            ...updateProvisionalDataWithCSIDocuments({ csiDocuments: getDocumentsRes.documents, provisionalData }),
            documentsSyncContext: getDocumentsRes.syncContext
        };
    provisionalData.csiDocuments = csiDocuments;
    provisionalData.csiDocumentMap = csiDocumentMap;
    syncContext.documentsSyncContext = documentsSyncContext;
    const getAssetsRes = await contentSourceInstance.getAssets({ syncContext: provisionalData.syncContext?.assetsSyncContext });
    const { csiAssets, csiAssetMap, assetsSyncContext } = Array.isArray(getAssetsRes)
        ? { csiAssets: getAssetsRes, csiAssetMap: lodash_1.default.keyBy(getAssetsRes, 'id'), assetsSyncContext: undefined }
        : {
            ...updateProvisionalDataWithCSIAssets({ csiAssets: getAssetsRes.assets, provisionalData }),
            assetsSyncContext: getAssetsRes.syncContext
        };
    provisionalData.csiAssets = csiAssets;
    provisionalData.csiAssetMap = csiAssetMap;
    syncContext.assetsSyncContext = assetsSyncContext;
    provisionalData.syncContext = (0, utils_1.omitByNil)(syncContext);
    return { csiDocuments, csiAssets, csiDocumentMap, csiAssetMap, syncContext };
}
exports.updateProvisionalDataFromContentSource = updateProvisionalDataFromContentSource;
function updateProvisionalDataWithCSIDocuments({ csiDocuments, provisionalData }) {
    if (!csiDocuments) {
        csiDocuments = [];
    }
    if (provisionalData.syncContext?.documentsSyncContext && provisionalData.csiDocuments) {
        for (let idx = 0; idx < csiDocuments.length; idx++) {
            const csiDocument = csiDocuments[idx];
            const index = provisionalData.csiDocuments.findIndex((doc) => doc.id === csiDocument.id);
            if (index === -1) {
                provisionalData.csiDocuments.push(csiDocument);
            }
            else {
                provisionalData.csiDocuments.splice(index, 1, csiDocument);
            }
        }
        let csiDocumentMap;
        if (provisionalData.csiDocumentMap) {
            csiDocumentMap = Object.assign(provisionalData.csiDocumentMap, lodash_1.default.keyBy(csiDocuments, 'id'));
        }
        else {
            csiDocumentMap = lodash_1.default.keyBy(provisionalData.csiDocuments, 'id');
            provisionalData.csiDocumentMap = csiDocumentMap;
        }
        return {
            csiDocuments: provisionalData.csiDocuments,
            csiDocumentMap
        };
    }
    else {
        const csiDocumentMap = lodash_1.default.keyBy(csiDocuments, 'id');
        provisionalData.csiDocuments = csiDocuments;
        provisionalData.csiDocumentMap = csiDocumentMap;
        return {
            csiDocuments,
            csiDocumentMap
        };
    }
}
function updateProvisionalDataWithCSIAssets({ csiAssets, provisionalData }) {
    if (!csiAssets) {
        csiAssets = [];
    }
    if (provisionalData.syncContext?.assetsSyncContext && provisionalData.csiAssets) {
        for (let idx = 0; idx < csiAssets.length; idx++) {
            const csiAsset = csiAssets[idx];
            const index = provisionalData.csiAssets.findIndex((asset) => asset.id === csiAsset.id);
            if (index === -1) {
                provisionalData.csiAssets.push(csiAsset);
            }
            else {
                provisionalData.csiAssets.splice(index, 1, csiAsset);
            }
        }
        let csiAssetMap;
        if (provisionalData.csiAssetMap) {
            csiAssetMap = Object.assign(provisionalData.csiAssetMap, lodash_1.default.keyBy(csiAssets, 'id'));
        }
        else {
            csiAssetMap = lodash_1.default.keyBy(provisionalData.csiAssets, 'id');
            provisionalData.csiAssetMap = csiAssetMap;
        }
        return {
            csiAssets: provisionalData.csiAssets,
            csiAssetMap
        };
    }
    else {
        const csiAssetMap = lodash_1.default.keyBy(csiAssets, 'id');
        provisionalData.csiAssets = csiAssets;
        provisionalData.csiAssetMap = csiAssetMap;
        return {
            csiAssets,
            csiAssetMap
        };
    }
}
async function syncContentSource({ contentSourceData, contentSourceEvent }) {
    const syncContext = {
        ...(contentSourceEvent.options?.clearDocumentsSyncContext ? {} : { documentsSyncContext: contentSourceData.syncContext?.documentsSyncContext }),
        ...(contentSourceEvent.options?.clearAssetsSyncContext ? {} : { assetsSyncContext: contentSourceData.syncContext?.assetsSyncContext })
    };
    const getDocumentsRes = await contentSourceData.instance.getDocuments({
        modelMap: contentSourceData.csiModelMap,
        syncContext: syncContext.documentsSyncContext
    });
    const csiDocuments = Array.isArray(getDocumentsRes) ? getDocumentsRes : getDocumentsRes.documents;
    const documentsSyncContext = Array.isArray(getDocumentsRes) ? undefined : getDocumentsRes.syncContext;
    const getAssetsRes = await contentSourceData.instance.getAssets({ syncContext: syncContext.assetsSyncContext });
    const csiAssets = Array.isArray(getAssetsRes) ? getAssetsRes : getAssetsRes.assets;
    const assetsSyncContext = Array.isArray(getAssetsRes) ? undefined : getAssetsRes.syncContext;
    return {
        contentChangesData: {
            documents: csiDocuments,
            assets: csiAssets
        },
        syncContext: (0, utils_1.omitByNil)({
            documentsSyncContext,
            assetsSyncContext
        })
    };
}
exports.syncContentSource = syncContentSource;
//# sourceMappingURL=content-store-data-manager.js.map