"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapDocumentsToApiDocuments = void 0;
const lodash_1 = __importDefault(require("lodash"));
const utils_1 = require("@stackbit/utils");
const content_store_utils_1 = require("../content-store-utils");
function mapDocumentsToApiDocuments({ documents, allowedLocales, contentSourceDataById, delegate, referenceMap }) {
    return documents.map((document) => documentToApiV2Object({
        document,
        allowedLocales,
        contentSourceDataById,
        delegate,
        referenceMap
    }));
}
exports.mapDocumentsToApiDocuments = mapDocumentsToApiDocuments;
function documentToApiV2Object({ document, allowedLocales, contentSourceDataById, delegate, referenceMap }) {
    const { fields, getPreview, ...rest } = document;
    const directReferences = referenceMap?.[document.srcType]?.[document.srcProjectId]?.[document.srcObjectId];
    return (0, utils_1.omitByUndefined)({
        ...lodash_1.default.omit(rest),
        srcObjectLabel: getPreview({ delegate /*, locale*/ }).previewTitle,
        references: directReferences
            ? {
                direct: directReferences
            }
            : undefined,
        fields: toAPIV2Fields({
            docFields: fields,
            delegate,
            allowedLocales,
            contentSourceDataById,
            contentSourceId: (0, content_store_utils_1.getContentSourceId)(document.srcType, document.srcProjectId)
        })
    });
}
function toAPIV2Fields({ docFields, delegate, contentSourceDataById, contentSourceId, allowedLocales }) {
    return lodash_1.default.mapValues(docFields, (docField) => {
        return (0, utils_1.omitByUndefined)(toAPIV2Field({
            docField,
            delegate,
            contentSourceDataById,
            contentSourceId,
            allowedLocales
        }));
    });
}
function toAPIV2Field({ docField, delegate, contentSourceDataById, contentSourceId, allowedLocales, isListItem = false }) {
    // TODO: reduce over allowedLocales rather then existing locales - use isUnset, and add fieldActions even for missing locales
    switch (docField.type) {
        case 'string':
        case 'text':
        case 'url':
        case 'slug':
        case 'html':
        case 'number':
        case 'boolean':
        case 'enum':
        case 'date':
        case 'datetime':
        case 'color':
        case 'style':
        case 'json':
        case 'file':
        case 'markdown':
        case 'richText': {
            if (docField.localized) {
                const locales = lodash_1.default.reduce(docField.locales, (acc, cur, locale) => {
                    acc[locale] = cur;
                    return acc;
                }, {});
                return {
                    ...docField,
                    locales
                };
            }
            return docField;
        }
        case 'image': {
            if (docField.localized) {
                const locales = lodash_1.default.reduce(docField.locales, (acc, cur, locale) => {
                    acc[locale] = {
                        ...cur,
                        fields: toAPIV2Fields({
                            docFields: cur.fields,
                            delegate,
                            contentSourceDataById,
                            contentSourceId,
                            allowedLocales
                        })
                    };
                    return acc;
                }, {});
                return {
                    ...docField,
                    locales
                };
            }
            if (docField.isUnset) {
                return docField;
            }
            return {
                ...docField,
                fields: toAPIV2Fields({
                    docFields: docField.fields,
                    delegate,
                    contentSourceDataById,
                    contentSourceId,
                    allowedLocales
                })
            };
        }
        case 'object': {
            if (docField.localized) {
                const locales = lodash_1.default.reduce(docField.locales, (acc, cur) => {
                    const { fields, getPreview, locale } = cur;
                    acc[locale] = {
                        ...cur,
                        srcObjectLabel: getPreview({
                            delegate,
                            locale
                        }).previewTitle ?? (isListItem ? 'Item' : 'Object'),
                        fields: toAPIV2Fields({
                            docFields: fields,
                            delegate,
                            contentSourceDataById,
                            contentSourceId,
                            allowedLocales
                        })
                    };
                    return acc;
                }, {});
                return {
                    ...docField,
                    locales
                };
            }
            // TODO: what about unset locales? what if there is an action that generates content for an empty object?
            if (docField.isUnset) {
                return docField;
            }
            const { fields, getPreview, ...rest } = docField;
            return {
                ...rest,
                srcObjectLabel: getPreview({ delegate }).previewTitle ?? (isListItem ? 'Item' : 'Object'),
                fields: toAPIV2Fields({
                    docFields: fields,
                    delegate,
                    contentSourceDataById,
                    contentSourceId,
                    allowedLocales
                })
            };
        }
        case 'model': {
            // TODO: merge with object
            if (docField.localized) {
                const locales = lodash_1.default.reduce(docField.locales, (acc, cur) => {
                    const { fields, getPreview, locale } = cur;
                    acc[locale] = {
                        ...cur,
                        srcObjectLabel: getPreview({
                            delegate,
                            locale
                        }).previewTitle,
                        fields: toAPIV2Fields({
                            docFields: fields,
                            delegate,
                            contentSourceDataById,
                            contentSourceId,
                            allowedLocales
                        })
                    };
                    return acc;
                }, {});
                return {
                    ...docField,
                    locales
                };
            }
            // TODO: what about unset locales? what if there is an action that generates content for an empty object?
            if (docField.isUnset) {
                return docField;
            }
            const { fields, getPreview, ...rest } = docField;
            return {
                ...rest,
                srcObjectLabel: getPreview({ delegate }).previewTitle,
                fields: toAPIV2Fields({
                    docFields: fields,
                    delegate,
                    contentSourceDataById,
                    contentSourceId,
                    allowedLocales
                })
            };
        }
        case 'reference': {
            if (docField.localized) {
                const refField = docField;
                const locales = lodash_1.default.reduce(docField.locales, (acc, cur, locale) => {
                    acc[locale] = {
                        ...cur,
                        ...populateReferenceLabels({
                            docField: refField,
                            contentSourceDataById,
                            contentSourceId,
                            locale: locale,
                            delegate
                        })
                    };
                    return acc;
                }, {});
                return {
                    ...docField,
                    locales
                };
            }
            return {
                ...docField,
                ...populateReferenceLabels({ docField, contentSourceDataById, contentSourceId, delegate })
            };
        }
        case 'cross-reference': {
            // todo: unify with reference using helper methods
            if (docField.localized) {
                const refField = docField;
                const locales = lodash_1.default.reduce(docField.locales, (acc, cur, locale) => {
                    acc[locale] = {
                        ...cur,
                        ...populateReferenceLabels({
                            docField: refField,
                            contentSourceDataById,
                            contentSourceId,
                            locale: locale,
                            delegate
                        })
                    };
                    return acc;
                }, {});
                return {
                    ...docField,
                    locales
                };
            }
            return {
                ...docField,
                ...populateReferenceLabels({ docField, contentSourceDataById, contentSourceId, delegate })
            };
        }
        case 'list': {
            if (docField.localized) {
                const locales = lodash_1.default.reduce(docField.locales, (acc, cur, locale) => {
                    acc[locale] = {
                        ...cur,
                        items: (cur.items ?? []).map((field) => toAPIV2Field({
                            docField: field,
                            contentSourceDataById,
                            contentSourceId,
                            delegate,
                            allowedLocales,
                            isListItem: true
                        }))
                    };
                    return acc;
                }, {});
                return {
                    ...docField,
                    locales
                };
            }
            const { items, ...rest } = docField;
            return {
                ...rest,
                items: items.map((field) => toAPIV2Field({
                    docField: field,
                    delegate,
                    contentSourceDataById,
                    contentSourceId,
                    allowedLocales,
                    isListItem: true
                }))
            };
        }
        default: {
            const _exhaustiveCheck = docField;
            console.error(`toLocalizedAPIField _exhaustiveCheck failed, docField.type: ${docField['type']}`);
            return _exhaustiveCheck;
        }
    }
}
function populateReferenceLabels({ docField, locale, contentSourceDataById, contentSourceId, delegate }) {
    const refField = (0, content_store_utils_1.getDocumentFieldForLocale)(docField, locale);
    if (!refField || refField?.isUnset) {
        return {};
    }
    if (refField.type === 'reference') {
        if (refField.refType === 'document') {
            const document = contentSourceDataById[contentSourceId]?.documentMap[refField.refId];
            if (document) {
                return { srcObjectLabel: document?.getPreview({ delegate }).previewTitle, srcModelLabel: document?.srcModelLabel, isMissing: false };
            }
        }
        else if (refField.refType === 'asset') {
            const asset = contentSourceDataById[contentSourceId]?.assetMap[refField.refId];
            if (asset) {
                return { srcObjectLabel: asset.srcObjectLabel, srcModelLabel: asset.srcModelLabel, isMissing: false };
            }
        }
    }
    else if (refField?.type === 'cross-reference') {
        const srcId = (0, content_store_utils_1.getContentSourceId)(refField.refSrcType, refField.refProjectId);
        if (refField.refType === 'document') {
            const document = contentSourceDataById[srcId]?.documentMap[refField.refId];
            if (document) {
                return {
                    refObjectLabel: document?.getPreview({ delegate }).previewTitle,
                    refModelLabel: document?.srcModelLabel,
                    refModelName: document?.srcModelName,
                    isMissing: false
                };
            }
        }
        else if (refField.refType === 'asset') {
            const asset = contentSourceDataById[srcId]?.assetMap[refField.refId];
            if (asset) {
                return { refObjectLabel: asset.srcObjectLabel, refModelLabel: asset.srcModelLabel, refModelName: asset?.srcModelName, isMissing: false };
            }
        }
    }
    return { isMissing: true };
}
//# sourceMappingURL=store-to-api-v2-docs-converter.js.map