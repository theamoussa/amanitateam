import * as StackbitTypes from '@stackbit/types';
import { BackCompatContentSourceInterface } from './backward-compatibility';
import { ContentSourceData, ContentStoreEvent, ProvisionalData, ContentStoreEventType } from '../types';
export declare function updateProvisionalDataFromContentSource({ contentSourceInstance, csiModelMap, provisionalData }: {
    contentSourceInstance: BackCompatContentSourceInterface;
    csiModelMap: Record<string, StackbitTypes.Model>;
    provisionalData: ProvisionalData;
}): Promise<{
    csiDocuments: StackbitTypes.Document[];
    csiDocumentMap: Record<string, StackbitTypes.Document>;
    csiAssets: StackbitTypes.Asset[];
    csiAssetMap: Record<string, StackbitTypes.Asset>;
    syncContext?: {
        documentsSyncContext?: unknown;
        assetsSyncContext?: unknown;
    };
}>;
export declare function syncContentSource({ contentSourceData, contentSourceEvent }: {
    contentSourceData: ContentSourceData;
    contentSourceEvent: ContentStoreEvent & {
        eventName: typeof ContentStoreEventType.ContentSourceRequestSync;
    };
}): Promise<{
    contentChangesData: StackbitTypes.ContentChanges;
    syncContext: ContentSourceData['syncContext'];
}>;
//# sourceMappingURL=content-store-data-manager.d.ts.map