import type * as StackbitTypes from '@stackbit/types';
import type * as ContentStoreTypes from '../types';
export declare class ContentValidationError extends Error {
    name: 'ContentValidationError';
    validation?: string;
    fieldPath?: StackbitTypes.FieldPath;
    value?: any;
    relatedDocumentId?: string;
    constructor({ message, validation, fieldPath, value, relatedDocumentId }: {
        message: string;
        validation?: string;
        fieldPath?: (string | number)[];
        value?: any;
        relatedDocumentId?: string;
    });
}
export declare function validateUpdateOperationFields({ updateOperationFields, modelName, locale, contentSourceData, configDelegate }: {
    updateOperationFields: Record<string, StackbitTypes.UpdateOperationField>;
    modelName: string;
    locale?: string;
    contentSourceData: ContentStoreTypes.ContentSourceData;
    configDelegate: StackbitTypes.ConfigDelegate;
}): Promise<void>;
export declare function validateUpdateOperations({ updateOperations, csiDocument, contentSourceData, configDelegate }: {
    updateOperations: StackbitTypes.UpdateOperation[];
    csiDocument: StackbitTypes.Document;
    contentSourceData: ContentStoreTypes.ContentSourceData;
    configDelegate: StackbitTypes.ConfigDelegate;
}): Promise<void>;
export declare function internalValidateContent(documents: StackbitTypes.Document[], assets: StackbitTypes.Asset[], contentSourceData: ContentStoreTypes.ContentSourceData, locale?: string): ContentStoreTypes.ValidationError[];
//# sourceMappingURL=document-validations.d.ts.map