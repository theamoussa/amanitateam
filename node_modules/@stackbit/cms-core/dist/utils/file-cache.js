"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoopFileCache = exports.FileCache = void 0;
const path_1 = __importDefault(require("path"));
const fse = __importStar(require("fs-extra"));
class FileCache {
    constructor({ dirPath, keyPrefix }) {
        this.dirPath = dirPath;
        this.keyPrefix = keyPrefix ?? '';
    }
    async get(key) {
        const fileName = this.filePathKey(key);
        try {
            const exists = await fse.pathExists(fileName);
            if (!exists) {
                return;
            }
            return fse.readJson(fileName);
        }
        catch (error) {
            return;
        }
    }
    async set(key, value) {
        const fileName = this.filePathKey(key);
        try {
            return fse.outputJson(fileName, value);
        }
        catch (error) {
            return;
        }
    }
    async remove(key) {
        const fileName = this.filePathKey(key);
        try {
            return await fse.remove(fileName);
        }
        catch (error) {
            return;
        }
    }
    filePathKey(key) {
        return path_1.default.join(this.dirPath, normalizePath(`${this.keyPrefix}${key}.json`));
    }
}
exports.FileCache = FileCache;
/**
 * Normalizes path component by removing windows illegal characters
 */
function normalizePath(pathComponent) {
    return pathComponent.replace(/[:<>=?$!@+|]+/g, '-');
}
/**
 * This no-op file cache is used to replace FileCache when Stackbit runs in Cloud.
 */
class NoopFileCache {
    async get() {
        return;
    }
    async set() {
        return;
    }
    async remove() {
        return;
    }
}
exports.NoopFileCache = NoopFileCache;
//# sourceMappingURL=file-cache.js.map