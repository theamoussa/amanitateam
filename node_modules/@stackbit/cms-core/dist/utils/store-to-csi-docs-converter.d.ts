import * as CSITypes from '@stackbit/types';
import * as ContentStoreTypes from '../types';
export declare function mapStoreDocumentsToCSIDocumentsWithSource({ documents, csiDocumentMap }: {
    documents: ContentStoreTypes.Document[];
    csiDocumentMap: Record<string, CSITypes.Document>;
}): CSITypes.DocumentWithSource[];
/**
 * This method converts documents stored in an internal ContentStoreTypes.Document
 * format to documents in a public CSITypes.DocumentWithSource format. These
 * documents are then passed to document hook and sitemap functions defined in
 * stackbit.config.ts.
 *
 * Most of the properties, including fields and their types, are taken from the
 * internal documents that contain changes made by mapDocuments, mapModels and
 * modelExtensions functions.
 *
 * The document's context is taken from the CSI Document because context is not
 * included in the internal documents.
 */
export declare function mapStoreDocumentToCSIDocumentWithSource({ document, csiDocument }: {
    document: ContentStoreTypes.Document;
    csiDocument: CSITypes.Document;
}): CSITypes.DocumentWithSource;
export declare function mapStoreFieldToCSIField<Type extends CSITypes.FieldType>(documentField: ContentStoreTypes.DocumentFieldLocalizedForType<Type>): CSITypes.DocumentFieldLocalizedForType<Type> | undefined;
export declare function mapStoreFieldToCSIField<Type extends CSITypes.FieldType>(documentField: ContentStoreTypes.DocumentFieldNonLocalizedForType<Type>): CSITypes.DocumentFieldNonLocalizedForType<Type> | undefined;
export declare function mapStoreFieldToCSIField<Type extends CSITypes.FieldType>(documentField: ContentStoreTypes.DocumentFieldForType<Type>): CSITypes.DocumentFieldForType<Type> | undefined;
//# sourceMappingURL=store-to-csi-docs-converter.d.ts.map