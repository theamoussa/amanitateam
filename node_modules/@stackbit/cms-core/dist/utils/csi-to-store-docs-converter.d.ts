import { Model } from '@stackbit/sdk';
import type * as StackbitTypes from '@stackbit/types';
import type * as ContentStoreTypes from '../types';
import { BackCompatContentSourceInterface } from './backward-compatibility';
export declare function mapCSIAssetsToStoreAssets({ csiAssets, contentSourceInstance, defaultLocaleCode }: {
    csiAssets: StackbitTypes.Asset[];
    contentSourceInstance: BackCompatContentSourceInterface;
    defaultLocaleCode?: string;
}): ContentStoreTypes.Asset[];
/**
 * CSI documents do not specify unset fields. For example, if the "title" field
 * is not set in CMS, the CSI document will not have the title field in its
 * "fields" map.
 *
 * On the other hand, and for historical reasons, Stackbit client requires all
 * fields to be defined on the document, even the fields that are not set to any
 * value. Therefore, until this issue is solved and Stackbit client will be able
 * to infer unset document field from the model, every content store document
 * need to be extended and list all the fields from the matching model.
 *
 * Empty primitive fields like "string" are regarded empty when they have no
 * "value" property. Other more complex fields like objects and references have
 * the special "isUnset" property.
 *
 * @param csiDocuments
 * @param contentSourceInstance
 * @param modelMap
 * @param defaultLocaleCode
 * @param assetSources
 * @param createConfigDelegate
 */
export declare function mapCSIDocumentsToStoreDocuments({ csiDocuments, contentSourceInstance, modelMap, defaultLocaleCode, assetSources, createConfigDelegate, logger }: {
    csiDocuments: StackbitTypes.Document[];
    contentSourceInstance: BackCompatContentSourceInterface;
    modelMap: Record<string, Model>;
    defaultLocaleCode?: string;
    assetSources: StackbitTypes.AssetSource[];
    createConfigDelegate: () => StackbitTypes.ConfigDelegate;
    logger: StackbitTypes.Logger;
}): ContentStoreTypes.Document[];
export declare function getDocumentLocale({ csiDocument, model }: {
    csiDocument: StackbitTypes.Document;
    model: Model;
}): string | undefined;
export declare function getDocumentPreview({ csiDocument, model, srcType, srcProjectId, delegate, locale }: {
    csiDocument: StackbitTypes.Document;
    model: Model;
    srcType: string;
    srcProjectId: string;
    delegate: StackbitTypes.ConfigDelegate;
    locale?: string;
}): ContentStoreTypes.DocumentPreview;
//# sourceMappingURL=csi-to-store-docs-converter.d.ts.map