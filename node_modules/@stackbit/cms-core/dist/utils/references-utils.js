"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReferenceMap = void 0;
const lodash_1 = __importDefault(require("lodash"));
const getReferenceMap = (documents) => {
    const referenceMap = {};
    const iterateFields = (fields, rootObject) => {
        for (const fieldName in fields) {
            const field = fields[fieldName];
            if (field) {
                iterateField(field, rootObject);
            }
        }
    };
    const iterateField = (field, rootObject) => {
        if (field.type === 'reference' || field.type === 'unresolved_reference' || field.type === 'cross-reference') {
            let references = [];
            if (field.type === 'unresolved_reference') {
                if ('refId' in field) {
                    references = [
                        {
                            srcType: rootObject.srcType,
                            srcProjectId: rootObject.srcProjectId,
                            srcDocumentId: field.refId
                        }
                    ];
                }
            }
            else if (field.type === 'reference') {
                if ('locales' in field) {
                    references = lodash_1.default.values(field.locales).map((ref) => ({
                        srcType: rootObject.srcType,
                        srcProjectId: rootObject.srcProjectId,
                        srcDocumentId: ref.refId
                    }));
                }
                else if (!field.isUnset) {
                    references = [
                        {
                            srcType: rootObject.srcType,
                            srcProjectId: rootObject.srcProjectId,
                            srcDocumentId: field.refId
                        }
                    ];
                }
            }
            else {
                if ('locales' in field) {
                    references = lodash_1.default.values(field.locales).map((ref) => ({
                        srcType: ref.refSrcType,
                        srcProjectId: ref.refProjectId,
                        srcDocumentId: ref.refId
                    }));
                }
                else if ('refId' in field) {
                    references = [
                        {
                            srcType: field.refSrcType,
                            srcProjectId: field.refProjectId,
                            srcDocumentId: field.refId
                        }
                    ];
                }
            }
            for (const reference of references) {
                const currentObjectPath = [reference.srcType, reference.srcProjectId, reference.srcDocumentId];
                const currentReferences = lodash_1.default.get(referenceMap, currentObjectPath) || [];
                const existingDef = currentReferences.find((ref) => ref.srcType === rootObject.srcType && ref.srcProjectId === rootObject.srcProjectId && ref.srcDocumentId === rootObject.srcObjectId);
                if (existingDef) {
                    existingDef.count += 1;
                }
                else {
                    currentReferences.push({
                        srcType: rootObject.srcType,
                        srcProjectId: rootObject.srcProjectId,
                        srcDocumentId: rootObject.srcObjectId,
                        count: 1
                    });
                    lodash_1.default.set(referenceMap, currentObjectPath, currentReferences);
                }
            }
        }
        else if (field.type === 'object' || field.type === 'model') {
            const fieldSets = 'locales' in field ? lodash_1.default.values(field.locales).map((fieldSet) => fieldSet.fields) : field.isUnset === true ? [] : [field.fields];
            for (const fields of fieldSets) {
                iterateFields(fields, rootObject);
            }
        }
        else if (field.type === 'list') {
            const itemSets = 'locales' in field ? lodash_1.default.values(field.locales).map((fieldSet) => fieldSet.items) : [field.items];
            for (const items of itemSets) {
                items.forEach((item) => iterateField(item, rootObject));
            }
        }
    };
    for (const document of documents) {
        iterateFields(document.fields, document);
    }
    return referenceMap;
};
exports.getReferenceMap = getReferenceMap;
//# sourceMappingURL=references-utils.js.map