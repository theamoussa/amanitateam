import { Config, PresetMap } from '@stackbit/sdk';
import * as StackbitTypes from '@stackbit/types';
import * as ContentStoreTypes from '../types';
import { CustomActionStateChange, CustomActionRunStateMap, APICustomAction, APICustomActionGlobal, APICustomActionBulk, APICustomActionModel, APICustomActionDocumentSpecifier, APIGetCustomActionRequest, APIGetRunningCustomActionsRequest, APIRunCustomActionRequest, APIRunCustomActionResponse } from '../types';
export declare function getGlobalAndBulkAPIActions({ stackbitConfig, customActionRunStateMap, contentSourceDataById, userLogger, pageUrl, user, locale, currentPageDocument }: {
    stackbitConfig: Config | null;
    customActionRunStateMap: CustomActionRunStateMap;
    contentSourceDataById: Record<string, ContentStoreTypes.ContentSourceData>;
    userLogger: StackbitTypes.Logger;
    pageUrl?: string;
    user?: ContentStoreTypes.User;
    locale?: string;
    currentPageDocument?: APICustomActionDocumentSpecifier;
}): Promise<(APICustomActionGlobal | APICustomActionBulk | APICustomActionModel)[]>;
export declare function resolveCustomActionsById({ getActionRequest, customActionRunStateMap, contentSourceDataById, stackbitConfig, userLogger }: {
    getActionRequest: APIGetCustomActionRequest;
    customActionRunStateMap: CustomActionRunStateMap;
    contentSourceDataById: Record<string, ContentStoreTypes.ContentSourceData>;
    stackbitConfig: Config | null;
    userLogger: StackbitTypes.Logger;
}): Promise<APICustomAction[]>;
export declare function getRunningActions({ getRunningActionsRequest, customActionRunStateMap, contentSourceDataById, stackbitConfig, userLogger }: {
    getRunningActionsRequest: APIGetRunningCustomActionsRequest;
    customActionRunStateMap: CustomActionRunStateMap;
    contentSourceDataById: Record<string, ContentStoreTypes.ContentSourceData>;
    stackbitConfig: Config | null;
    userLogger: StackbitTypes.Logger;
}): APICustomAction[];
export declare function runCustomAction({ runActionRequest, customActionRunStateMap, contentSourceDataById, stackbitConfig, userLogger, presets, onProgress }: {
    runActionRequest: APIRunCustomActionRequest;
    customActionRunStateMap: CustomActionRunStateMap;
    contentSourceDataById: Record<string, ContentStoreTypes.ContentSourceData>;
    stackbitConfig: Config | null;
    userLogger: StackbitTypes.Logger;
    presets: PresetMap;
    onProgress: (options: CustomActionStateChange) => void;
}): Promise<APIRunCustomActionResponse>;
//# sourceMappingURL=custom-actions.d.ts.map