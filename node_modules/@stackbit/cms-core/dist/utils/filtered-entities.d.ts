import * as CSITypes from '@stackbit/types';
import { ContentStoreTypes } from '../';
export declare const getFilteredDocumentsForUser: ({ user, documents, permissionsForModel, permissionsForDocument, contentSourceDataById, createConfigDelegate, logger }: {
    user?: ContentStoreTypes.User | undefined;
    permissionsForModel: CSITypes.StackbitConfig['permissionsForModel'];
    permissionsForDocument: CSITypes.StackbitConfig['permissionsForDocument'];
    documents: ContentStoreTypes.Document[];
    contentSourceDataById: Record<string, ContentStoreTypes.ContentSourceData>;
    createConfigDelegate: () => CSITypes.ConfigDelegate;
    logger: CSITypes.Logger;
}) => ContentStoreTypes.Document[];
export declare const getFilteredAssetsForUser: ({ user, assets, filterAsset, configDelegate, contentSourceDataById }: {
    user?: ContentStoreTypes.User | undefined;
    assets: ContentStoreTypes.Asset[];
    filterAsset: CSITypes.StackbitConfig['filterAsset'];
    configDelegate: CSITypes.ConfigDelegate;
    contentSourceDataById: Record<string, ContentStoreTypes.ContentSourceData>;
}) => ContentStoreTypes.Asset[];
export declare const getContentSourceFilteredModelsForUser: ({ user, configDelegate, contentSourceData, permissionsForModel }: {
    user?: ContentStoreTypes.User | undefined;
    configDelegate: CSITypes.ConfigDelegate;
    contentSourceData: ContentStoreTypes.ContentSourceData;
    permissionsForModel: CSITypes.StackbitConfig['permissionsForModel'];
}) => CSITypes.Model[];
export declare const getFilteredModelForUser: ({ user, name, configDelegate, contentSourceData, permissionsForModel }: {
    user?: ContentStoreTypes.User | undefined;
    name: string;
    configDelegate: CSITypes.ConfigDelegate;
    contentSourceData: ContentStoreTypes.ContentSourceData;
    permissionsForModel: CSITypes.StackbitConfig['permissionsForModel'];
}) => CSITypes.Model;
//# sourceMappingURL=filtered-entities.d.ts.map