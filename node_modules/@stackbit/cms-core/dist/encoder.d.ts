export type FieldData = Record<string, FieldDataRootItem>;
export interface FieldDataItem {
    type: 'object';
    srcObjectLabel: string;
    srcModelName: string;
    srcModelLabel: string;
    fields: Record<string, any>;
}
export interface FieldDataRootItem extends Omit<FieldDataItem, 'type'> {
    type: 'object' | 'image' | 'file';
    srcType: string;
    srcProjectId: string;
    srcProjectUrl: string;
    srcEnvironment: string;
    srcObjectId: string;
    srcObjectUrl: string;
    isChanged: boolean;
    status: 'modified' | 'added' | 'deleted' | 'published';
    createdAt: string;
    createdBy?: string;
    updatedAt: string;
    updatedBy?: string[];
}
export interface EncodingResult {
    fieldData: FieldData;
    encodedData?: any[];
    hashedData?: Record<string, any>;
    fieldDataPaths?: string[];
}
export interface EncodeDataOptions {
    data: any[];
    prevEncodingResult?: EncodingResult | null;
    delegate: any;
    encodeDelimiter: string;
}
export default function encodeData({ data, prevEncodingResult, delegate }: EncodeDataOptions): EncodingResult;
//# sourceMappingURL=encoder.d.ts.map