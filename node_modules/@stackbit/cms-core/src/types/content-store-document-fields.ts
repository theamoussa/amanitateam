import * as CSITypes from '@stackbit/types';

export type DocumentField =
    | DocumentStringLikeField
    | DocumentMarkdownField
    | DocumentNumberField
    | DocumentBooleanField
    | DocumentJsonField
    | DocumentStyleField
    | DocumentRichTextField
    | DocumentImageField
    | DocumentFileField
    | DocumentObjectField
    | DocumentModelField
    | DocumentReferenceField
    | DocumentCrossReferenceField
    | DocumentListField;

export type DocumentFieldNonLocalized =
    | DocumentStringLikeFieldNonLocalized
    | DocumentMarkdownFieldNonLocalized
    | DocumentNumberFieldNonLocalized
    | DocumentBooleanFieldNonLocalized
    | DocumentJsonFieldNonLocalized
    | DocumentStyleFieldNonLocalized
    | DocumentRichTextFieldNonLocalized
    | DocumentImageFieldNonLocalized
    | DocumentFileFieldNonLocalized
    | DocumentObjectFieldNonLocalized
    | DocumentModelFieldNonLocalized
    | DocumentReferenceFieldNonLocalized
    | DocumentCrossReferenceFieldNonLocalized
    | DocumentListFieldNonLocalized;

export type DocumentFieldLocalized =
    | DocumentStringLikeFieldLocalized
    | DocumentMarkdownFieldLocalized
    | DocumentNumberFieldLocalized
    | DocumentBooleanFieldLocalized
    | DocumentJsonFieldLocalized
    | DocumentStyleFieldLocalized
    | DocumentRichTextFieldLocalized
    | DocumentImageFieldLocalized
    | DocumentFileFieldLocalized
    | DocumentObjectFieldLocalized
    | DocumentModelFieldLocalized
    | DocumentReferenceFieldLocalized
    | DocumentCrossReferenceFieldLocalized
    | DocumentListFieldLocalized;

export type DocumentFieldAPI =
    | DocumentStringLikeFieldAPI
    | DocumentMarkdownFieldAPI
    | DocumentNumberFieldAPI
    | DocumentBooleanFieldAPI
    | DocumentJsonFieldAPI
    | DocumentStyleFieldAPI
    | DocumentRichTextFieldAPI
    | DocumentImageFieldAPI
    | DocumentFileFieldAPI
    | DocumentObjectFieldAPI
    | DocumentModelFieldAPI
    | DocumentReferenceFieldAPI
    | DocumentCrossReferenceFieldAPI
    | DocumentListFieldAPI;

export type DocumentFieldBaseProps = DocumentFieldBasePropsForDocumentField<DocumentFieldNonLocalized>;
export type DocumentFieldSpecificProps = DocumentFieldSpecificPropsForDocumentField<DocumentFieldLocalized>;

/**
 * Utility Types
 */
type FieldType = CSITypes.FieldType;

export type ExtractByType<Union extends { type: FieldType | 'unresolved_reference' }, Type extends FieldType | 'unresolved_reference'> = Union extends {
    type: Type;
}
    ? Union
    : never;
export type DocumentFieldForType<Type extends FieldType> = ExtractByType<DocumentField, Type>;
export type DocumentFieldNonLocalizedForType<Type extends FieldType> = ExtractByType<DocumentFieldNonLocalized, Type>;
export type DocumentFieldLocalizedForType<Type extends FieldType> = ExtractByType<DocumentFieldLocalized, Type>;
export type DocumentFieldAPIForType<Type extends FieldType | 'unresolved_reference'> = ExtractByType<DocumentFieldAPI, Type>;
export type DocumentFieldBasePropsForType<Type extends FieldType> = ExtractByType<DocumentFieldBaseProps, Type>;

export type DocumentFieldBasePropsForDocumentField<DocField extends DocumentField> = DocField extends { isUnset?: false; localized?: false }
    ? Omit<DocField, keyof DocumentFieldSpecificPropsForDocumentField<DocumentFieldLocalizedForType<DocField['type']>> | 'localized' | 'isUnset'>
    : never;

export type DocumentFieldSpecificPropsForDocumentField<DocField extends DocumentFieldLocalized> = DocField extends { locales: Record<string, infer Props> }
    ? Omit<Props, 'locale'>
    : never;

/**
 * string-like fields (e.g., string, url, slug, text, html, enum, date, datetime, color)
 * The 'markdown' is not included, although it is a string field, because it has
 * the `multiElement` and `isUnset` fields.
 * The 'file' also has `isUnset` field and should have its own type anyway.
 */
export type DocumentStringLikeFieldTypes = Exclude<CSITypes.DocumentStringLikeFieldTypes, 'markdown' | 'file'>;

export type DocumentStringLikeField = DocumentStringLikeFieldForType<DocumentStringLikeFieldTypes>;
export type DocumentStringLikeFieldNonLocalized = DistributeDocumentStringLikeFieldNonLocalized<DocumentStringLikeFieldTypes>;
export type DocumentStringLikeFieldLocalized = DistributeDocumentStringFieldLocalized<DocumentStringLikeFieldTypes>;
export type DocumentStringLikeFieldAPI = DistributeDocumentStringFieldAPI<DocumentStringLikeFieldTypes>;

export type DocumentStringLikeFieldForType<Type> = Type extends DocumentStringLikeFieldTypes
    ? DocumentStringLikeFieldNonLocalizedForType<Type> | DocumentStringLikeFieldLocalizedForType<Type>
    : never;
export type DistributeDocumentStringLikeFieldNonLocalized<Type> = Type extends DocumentStringLikeFieldTypes
    ? DocumentStringLikeFieldNonLocalizedForType<Type>
    : never;
export type DistributeDocumentStringFieldLocalized<Type> = Type extends DocumentStringLikeFieldTypes ? DocumentStringLikeFieldLocalizedForType<Type> : never;
export type DistributeDocumentStringFieldAPI<Type> = Type extends DocumentStringLikeFieldTypes ? DocumentStringLikeFieldAPIForType<Type> : never;

export interface DocumentStringLikeFieldNonLocalizedForType<Type extends DocumentStringLikeFieldTypes> {
    type: Type;
    label?: string;
    localized?: false;
    value?: string;
}

export interface DocumentStringLikeFieldLocalizedForType<Type extends DocumentStringLikeFieldTypes> {
    type: Type;
    label?: string;
    localized: true;
    locales: Record<
        string,
        {
            locale: string;
            value: string;
        }
    >;
}

export type DocumentStringLikeFieldAPIForType<Type extends DocumentStringLikeFieldTypes> = {
    type: Type;
    label?: string;
    description?: string;
    value?: string | null;
} & ({ localized?: false } | { localized: true; locale: string });

/**
 * markdown
 */
export type DocumentMarkdownField = DocumentMarkdownFieldNonLocalized | DocumentMarkdownFieldLocalized;

export type DocumentMarkdownFieldNonLocalized = {
    type: 'markdown';
    label?: string;
    localized?: false;
    multiElement?: boolean;
    value?: string;
} & ({ isUnset: true; value?: never } | { isUnset?: false; value: string });

export interface DocumentMarkdownFieldLocalized {
    type: 'markdown';
    label?: string;
    localized: true;
    locales: Record<
        string,
        {
            locale: string;
            multiElement?: boolean;
            value: string;
        }
    >;
}

export type DocumentMarkdownFieldAPI = {
    type: 'markdown';
    multiElement?: boolean;
    label?: string;
    description?: string;
    value?: string | null;
} & ({ isUnset: true; value?: null } | { isUnset?: false; value: string }) &
    ({ localized?: false } | { localized: true; locale: string });

/**
 * number
 */
export type DocumentNumberField = DocumentNumberFieldNonLocalized | DocumentNumberFieldLocalized;

export interface DocumentNumberFieldNonLocalized {
    type: 'number';
    label?: string;
    localized?: false;
    value?: number;
}

export interface DocumentNumberFieldLocalized {
    type: 'number';
    label?: string;
    localized: true;
    locales: Record<
        string,
        {
            locale: string;
            value: number;
        }
    >;
}

export type DocumentNumberFieldAPI = {
    type: 'number';
    value?: number | null;
    label?: string;
    description?: string;
} & ({ localized?: false } | { localized: true; locale: string });

/**
 * boolean
 */
export type DocumentBooleanField = DocumentBooleanFieldNonLocalized | DocumentBooleanFieldLocalized;

export interface DocumentBooleanFieldNonLocalized {
    type: 'boolean';
    label?: string;
    localized?: false;
    value?: boolean;
}

export interface DocumentBooleanFieldLocalized {
    type: 'boolean';
    label?: string;
    localized: true;
    locales: Record<
        string,
        {
            locale: string;
            value: boolean;
        }
    >;
}

export type DocumentBooleanFieldAPI = {
    type: 'boolean';
    value?: boolean | null;
    label?: string;
    description?: string;
} & ({ localized?: false } | { localized: true; locale: string });

/**
 * json
 */
export type DocumentJsonField = DocumentJsonFieldNonLocalized | DocumentJsonFieldLocalized;

export type DocumentJsonFieldNonLocalized = {
    type: 'json';
    label?: string;
    localized?: false;
    value?: any;
} & ({ isUnset: true; value?: never } | { isUnset?: false; value: any });

export interface DocumentJsonFieldLocalized {
    type: 'json';
    label?: string;
    localized: true;
    locales: Record<
        string,
        {
            locale: string;
            value: any;
        }
    >;
}

export type DocumentJsonFieldAPI = {
    type: 'json';
    label?: string;
    description?: string;
    value?: any;
} & ({ isUnset: true; value?: null } | { isUnset?: false; value: any }) &
    ({ localized?: false } | { localized: true; locale: string });

/**
 * style
 */
export type DocumentStyleField = DocumentStyleFieldNonLocalized | DocumentStyleFieldLocalized;
export type DocumentStyleFieldValue = Record<string, Partial<Record<CSITypes.StyleProps, any>>>;

export interface DocumentStyleFieldNonLocalized {
    type: 'style';
    label?: string;
    localized?: false;
    value?: DocumentStyleFieldValue;
}

export interface DocumentStyleFieldLocalized {
    type: 'style';
    label?: string;
    localized: true;
    locales: Record<
        string,
        {
            locale: string;
            value: DocumentStyleFieldValue;
        }
    >;
}

export type DocumentStyleFieldAPI = {
    type: 'style';
    value?: DocumentStyleFieldValue | null;
    label?: string;
    description?: string;
} & ({ localized?: false } | { localized: true; locale: string });

/**
 * richText
 */
export type DocumentRichTextField = DocumentRichTextFieldNonLocalized | DocumentRichTextFieldLocalized;
// TODO: richText value should be well defined according to Stackbit's internal rich-text format
export type DocumentRichTextFieldValue = any;

export type DocumentRichTextFieldNonLocalized = {
    type: 'richText';
    label?: string;
    localized?: false;
    hint?: string;
    multiElement?: boolean;
    value?: DocumentRichTextFieldValue;
} & ({ isUnset: true; value?: never } | { isUnset?: false; value: DocumentRichTextFieldValue });

export interface DocumentRichTextFieldLocalized {
    type: 'richText';
    label?: string;
    localized: true;
    locales: Record<
        string,
        {
            locale: string;
            hint?: string;
            multiElement?: boolean;
            value: DocumentRichTextFieldValue;
        }
    >;
}

export type DocumentRichTextFieldAPI = {
    type: 'richText';
    hint?: string;
    multiElement?: boolean;
    label?: string;
    description?: string;
    value?: DocumentRichTextFieldValue | null;
} & ({ isUnset: true; value?: null } | { isUnset?: false; value: DocumentRichTextFieldValue }) &
    ({ localized?: false } | { localized: true; locale: string });

/**
 * image
 */
export type DocumentImageField = DocumentImageFieldNonLocalized | DocumentImageFieldLocalized;

export type DocumentImageFieldNonLocalized = {
    type: 'image';
    label?: string;
    localized?: false;
    source?: string;
} & (
    | { isUnset: true }
    | {
          isUnset?: false;
          sourceData?: any;
          fields: ImageFields;
      }
);

export interface DocumentImageFieldLocalized {
    type: 'image';
    label?: string;
    source?: string;
    localized: true;
    locales: Record<
        string,
        {
            locale: string;
            sourceData?: any;
            fields: ImageFields;
        }
    >;
}

export type ImageFields = {
    title: DocumentStringLikeFieldForType<'string'>;
    url: DocumentStringLikeFieldForType<'string'>;
};

export type DocumentImageFieldAPI = {
    type: 'image';
    source?: string;
    label?: string;
    description?: string;
} & ({ isUnset: true } | { isUnset?: false; sourceData?: any; fields: ImageFieldsAPI }) &
    ({ localized?: false } | { localized: true; locale: string });

export type ImageFieldsAPI = {
    title: DocumentFieldAPIForType<'string'>;
    url: DocumentFieldAPIForType<'string'>;
};

/**
 * file
 */
export type DocumentFileField = DocumentFileFieldNonLocalized | DocumentFileFieldLocalized;

export type DocumentFileFieldNonLocalized = {
    type: 'file';
    label?: string;
    localized?: false;
    value?: any;
} & ({ isUnset: true; value?: never } | { isUnset?: false; value: any });

export interface DocumentFileFieldLocalized {
    type: 'file';
    label?: string;
    localized: true;
    locales: Record<
        string,
        {
            locale: string;
            value: any;
        }
    >;
}

export type DocumentFileFieldAPI = {
    type: 'file';
    label?: string;
    description?: string;
    value?: any;
} & ({ isUnset: true; value?: null } | { isUnset?: false; value: any }) &
    ({ localized?: false } | { localized: true; locale: string });

/**
 * object
 */
export type DocumentObjectField = DocumentObjectFieldNonLocalized | DocumentObjectFieldLocalized;

export type DocumentObjectFieldNonLocalized = {
    type: 'object';
    label?: string;
    localized?: false;
} & (
    | { isUnset: true }
    | {
          isUnset?: false;
          getPreview: (options: { delegate?: CSITypes.ConfigDelegate; locale?: string }) => DocumentObjectFieldPreview;
          fields: Record<string, DocumentField>;
      }
);

export interface DocumentObjectFieldLocalized {
    type: 'object';
    label?: string;
    localized: true;
    locales: Record<
        string,
        {
            locale: string;
            getPreview: (options: { delegate?: CSITypes.ConfigDelegate; locale?: string }) => DocumentObjectFieldPreview;
            fields: Record<string, DocumentField>;
        }
    >;
}

export interface DocumentObjectFieldPreview {
    previewTitle?: string;
    previewSubtitle?: string;
    previewImage?: unknown;
}

export type DocumentObjectFieldAPI = {
    type: 'object';
    label?: string;
    description?: string;
} & (
    | {
          isUnset: true;
      }
    | {
          isUnset?: false;
          srcObjectLabel: string;
          fields: Record<string, DocumentFieldAPI>;
      }
) &
    ({ localized?: false } | { localized: true; locale: string });

/**
 * model
 */
export type DocumentModelField = DocumentModelFieldNonLocalized | DocumentModelFieldLocalized;

export type DocumentModelFieldNonLocalized = {
    type: 'model';
    label?: string;
    localized?: false;
} & (
    | { isUnset: true }
    | {
          isUnset?: false;
          srcModelName: string;
          srcModelLabel: string;
          getPreview: (options: { delegate?: CSITypes.ConfigDelegate; locale?: string }) => DocumentModelFieldPreview;
          fields: Record<string, DocumentField>;
      }
);

export interface DocumentModelFieldLocalized {
    type: 'model';
    label?: string;
    localized: true;
    locales: Record<
        string,
        {
            locale: string;
            srcModelName: string;
            srcModelLabel: string;
            getPreview: (options: { delegate?: CSITypes.ConfigDelegate; locale?: string }) => DocumentModelFieldPreview;
            fields: Record<string, DocumentField>;
        }
    >;
}

export type DocumentModelFieldAPI = {
    type: 'object';
    label?: string;
    description?: string;
} & (
    | {
          isUnset: true;
      }
    | {
          isUnset?: false;
          srcObjectLabel: string;
          srcModelName: string;
          srcModelLabel: string;
          fields: Record<string, DocumentFieldAPI>;
      }
) &
    ({ localized?: false } | { localized: true; locale: string });

export interface DocumentModelFieldPreview {
    previewTitle: string;
    previewSubtitle?: string;
    previewImage?: unknown;
}

/**
 * reference
 */
export type DocumentReferenceField = DocumentReferenceFieldNonLocalized | DocumentReferenceFieldLocalized;

export type DocumentReferenceFieldNonLocalized = {
    type: 'reference';
    refType: 'document' | 'asset';
    label?: string;
    localized?: false;
} & (
    | { isUnset: true }
    | {
          isUnset?: false;
          refId: string;
      }
);

export interface DocumentReferenceFieldLocalized {
    type: 'reference';
    refType: 'document' | 'asset';
    label?: string;
    localized: true;
    locales: Record<
        string,
        {
            locale: string;
            refId: string;
        }
    >;
}

export type DocumentReferenceFieldAPI = {
    type: 'unresolved_reference';
    refType: 'object' | 'image';
    label?: string;
    description?: string;
} & (
    | { isUnset: true }
    | {
          isUnset?: false;
          refId: string;
      }
) &
    ({ localized?: false } | { localized: true; locale: string });

/**
 * cross-reference
 */
export type DocumentCrossReferenceField = DocumentCrossReferenceFieldNonLocalized | DocumentCrossReferenceFieldLocalized;

export type DocumentCrossReferenceFieldNonLocalized = {
    type: 'cross-reference';
    refType: 'document' | 'asset';
    label?: string;
    localized?: false;
} & (
    | { isUnset: true }
    | {
          isUnset?: false;
          refId: string;
          refSrcType: string;
          refProjectId: string;
      }
);

export interface DocumentCrossReferenceFieldLocalized {
    type: 'cross-reference';
    refType: 'document' | 'asset';
    label?: string;
    localized: true;
    locales: Record<
        string,
        {
            locale: string;
            refId: string;
            refSrcType: string;
            refProjectId: string;
        }
    >;
}

export type DocumentCrossReferenceFieldAPI = {
    type: 'cross-reference';
    refType: 'document' | 'asset';
    label?: string;
    description?: string;
} & (
    | { isUnset: true }
    | {
          isUnset?: false;
          refId: string;
          refSrcType: string;
          refProjectId: string;
      }
) &
    ({ localized?: false } | { localized: true; locale: string });

/**
 * list
 */
export type DocumentListField = DocumentListFieldNonLocalized | DocumentListFieldLocalized;
export type DocumentListFieldItems = Exclude<DocumentFieldNonLocalized, DocumentListFieldNonLocalized>;

export interface DocumentListFieldNonLocalized {
    type: 'list';
    label?: string;
    localized?: false;
    items: DocumentListFieldItems[];
}

export interface DocumentListFieldLocalized {
    type: 'list';
    label?: string;
    localized: true;
    locales: Record<
        string,
        {
            locale: string;
            items: DocumentListFieldItems[];
        }
    >;
}

export type DocumentListFieldItemsAPI = Exclude<DocumentFieldAPI, DocumentListFieldAPI>;
export type DocumentListFieldAPI = {
    type: 'list';
    label?: string;
    description?: string;
    items: DocumentListFieldItemsAPI[];
} & ({ localized?: false } | { localized: true; locale: string });
