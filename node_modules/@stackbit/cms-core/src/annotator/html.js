const _ = require('lodash');
const parser = require('parse5');

async function createAnnotations(filePath, data, logger) {
    if (!data) {
        return null;
    }
    let document;
    try {
        // See https://astexplorer.net for example parser output
        document = parser.parse(data, {
            sourceCodeLocationInfo: true
        });
    } catch (err) {
        logger.warn('[annotator] error parsing html file', { filePath, err });
        return null;
    }
    const annotations = [];
    const traverse = (node) => {
        if (!node || _.isEmpty(node.childNodes)) {
            return;
        }
        if (node.sourceCodeLocation && node.tagName) {
            annotations.push({
                sourceLocation: {
                    /// node.sourceCodeLocation contains the location for the entire node
                    start: {
                        line: node.sourceCodeLocation.startLine,
                        column: node.sourceCodeLocation.startCol - 1
                    },
                    end: {
                        line: node.sourceCodeLocation.endLine,
                        column: node.sourceCodeLocation.endCol
                    }
                },
                // Example:                                    <p>text</p>
                // node.sourceCodeLocation.startTag.endOffset == â†‘
                // The global charactar offset of the ending of the opening tag
                insertOffset: node.sourceCodeLocation.startTag.endOffset - 1
            });
        }
        node.childNodes.forEach((childNode) => traverse(childNode));
    };
    traverse(document);
    if (_.isEmpty(annotations)) {
        return null;
    }
    return annotations;
}

module.exports = {
    createAnnotations
};
