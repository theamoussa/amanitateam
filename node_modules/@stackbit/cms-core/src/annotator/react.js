const _ = require('lodash');

const parser = require('@babel/parser');
const traverse = require('@babel/traverse');

const utils = require('../utils');

async function createAnnotations(filePath, data, logger) {
    if (!utils.isRelevantReactData(data)) {
        // not suitable for react parsing, stop quickly
        return null;
    }
    let ast;
    try {
        // See https://astexplorer.net for example parser output
        ast = parser.parse(data, {
            sourceType: 'module',
            plugins: ['jsx', 'typescript', 'classProperties'],
            ranges: true
        });
    } catch (err) {
        logger.warn('[annotator] error parsing react file', { filePath, err });
        return null;
    }
    let foundReact = false;
    const annotations = [];
    traverse.default(ast, {
        ImportDeclaration(path) {
            if (!foundReact) {
                foundReact = _.get(path, 'node.source.value', '').trim().toLowerCase() === 'react';
            }
            path.skip();
        },
        JSXElement(path) {
            const children = path.node.children;
            const elementName = _.get(path, 'node.openingElement.name.name');
            if (!children || !path.node.loc || !elementName) {
                return null;
            }
            annotations.push({
                sourceLocation: path.node.loc,
                insertOffset: _.get(path, 'node.openingElement.name.end')
            });
        }
    });
    if (!foundReact || _.isEmpty(annotations)) {
        return null;
    }
    return annotations;
}

module.exports = {
    createAnnotations
};
