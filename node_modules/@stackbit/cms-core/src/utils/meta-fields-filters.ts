import { isDateFieldMatches, SearchSchema } from './search-utils';
import { ImageModel } from '@stackbit/sdk';
import { Model, ScheduledAction } from '@stackbit/types';
import { SearchFilterItem } from '../types';
import * as ContentStoreTypes from '../types';

export type MetaFieldMethodContext = { locale?: string; schema: SearchSchema; activeScheduledActionsByDocumentId: Record<string, ScheduledAction[]> };
export type MetaFieldMethod = ({
    filter,
    document,
    context
}: {
    filter: SearchFilterItem;
    document: ContentStoreTypes.Document;
    context: MetaFieldMethodContext;
}) => { field: ContentStoreTypes.DocumentField; model?: Model | ImageModel } | { result: boolean };

export const META_FIELDS = {
    createdAt: ({ filter, document }) => ({ field: { type: 'date', value: document.createdAt } }),
    updatedAt: ({ filter, document }) => ({ field: { type: 'date', value: document.updatedAt } }),
    status: ({ filter, document }) => ({ field: { type: 'enum', value: document.status } }),
    hasScheduledActions: ({ filter, document, context }) => ({
        field: { type: 'boolean', value: !!context.activeScheduledActionsByDocumentId[document.srcObjectId]?.length }
    }),
    scheduledActionDate: ({ filter, document, context }) => {
        return {
            result:
                context.activeScheduledActionsByDocumentId[document.srcObjectId]?.some((scheduledAction) => {
                    const field: ContentStoreTypes.DocumentField = { type: 'date', value: scheduledAction.executeAt };
                    return isDateFieldMatches({ field, filter, locale: context.locale });
                }) ?? false
        };
    }
} as Record<string, MetaFieldMethod>;
