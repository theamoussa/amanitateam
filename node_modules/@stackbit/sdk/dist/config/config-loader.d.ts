import { ModelsSource, ModelExtension } from '@stackbit/types';
import { ConfigValidationResult } from './config-validator';
import { ConfigError, ConfigLoadError, ModelLoadError, ConfigValidationError, StackbitConfigNotFoundError } from './config-errors';
import { Logger } from '../utils';
import type { Config, StackbitConfigWithPaths, Model } from './config-types';
import { StopConfigWatch } from './config-loader-utils';
export interface ConfigWithModelsPresetsResult {
    valid: boolean;
    config: Config | null;
    errors: ConfigError[];
}
export declare function loadConfigWithModelsPresetsAndValidate({ dirPath, modelsSource, stackbitConfigESBuildOutDir, watchCallback, logger }: {
    dirPath: string;
    modelsSource?: ModelsSource;
    stackbitConfigESBuildOutDir?: string;
    watchCallback?: (result: ConfigWithModelsPresetsResult) => void;
    logger?: Logger;
}): Promise<ConfigWithModelsPresetsResult & StopConfigWatch>;
export declare type ConfigWithModelsResult = {
    config: Config | null;
    errors: (ConfigLoadError | StackbitConfigNotFoundError | ModelLoadError | ConfigValidationError)[];
};
export declare function loadConfigWithModels({ dirPath, stackbitConfigESBuildOutDir, watchCallback, logger }: {
    dirPath: string;
    stackbitConfigESBuildOutDir?: string;
    watchCallback?: (result: ConfigWithModelsResult) => void;
    logger?: Logger;
}): Promise<ConfigWithModelsResult & StopConfigWatch>;
export declare type LoadConfigResult = {
    config: Config;
    errors: ConfigValidationError[];
} | {
    config: null;
    errors: (ConfigLoadError | StackbitConfigNotFoundError)[];
};
export declare function loadConfig({ dirPath, stackbitConfigESBuildOutDir, watchCallback, logger }: {
    dirPath: string;
    stackbitConfigESBuildOutDir?: string;
    watchCallback?: (result: LoadConfigResult) => void;
    logger?: Logger;
}): Promise<LoadConfigResult & StopConfigWatch>;
export declare function loadAndMergeModelsFromFiles(config: Config): Promise<{
    config: Config;
    errors: (ModelLoadError | ConfigValidationError)[];
}>;
export declare function validateAndNormalizeConfig(config: Config): ConfigValidationResult;
export declare type StackbitConfigLoaderResult = {
    config: StackbitConfigWithPaths;
    error: null;
} | {
    config: null;
    error: ConfigLoadError | StackbitConfigNotFoundError;
};
export declare function loadConfigFromDir({ dirPath, stackbitConfigESBuildOutDir, watchCallback, logger }: {
    dirPath: string;
    stackbitConfigESBuildOutDir?: string;
    watchCallback?: (result: StackbitConfigLoaderResult) => void;
    logger?: Logger;
}): Promise<StackbitConfigLoaderResult & StopConfigWatch>;
export declare function mergeConfigModelsWithExternalModels({ configModels, externalModels, logger }: {
    configModels: ModelExtension[];
    externalModels: Model[];
    logger?: Logger;
}): Model[];
//# sourceMappingURL=config-loader.d.ts.map