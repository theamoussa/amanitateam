"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadStackbitConfigFromJs = void 0;
const esbuild = __importStar(require("esbuild"));
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
const os = __importStar(require("os"));
const lodash_1 = __importDefault(require("lodash"));
const config_errors_1 = require("./config-errors");
async function loadStackbitConfigFromJs({ configPath, watch, callback, logger, outDir }) {
    try {
        // resolve config relative to cwd if it is not absolute
        configPath = path.resolve(configPath);
        logger = logger === null || logger === void 0 ? void 0 : logger.createLogger({ label: 'config-loader-esbuilt' });
        logger === null || logger === void 0 ? void 0 : logger.debug(`building stackbit config from ${configPath}`);
        const projectDir = path.dirname(configPath);
        const fileName = path.basename(configPath);
        // clean previously cached files
        if (outDir) {
            await fs.emptyDir(outDir);
        }
        const tempDir = outDir ? path.resolve(projectDir, outDir) : await fs.mkdtemp(path.join(os.tmpdir(), 'stackbit-config-'));
        const outfilePath = path.join(tempDir, 'stackbit.config.cjs');
        let stopped = false;
        const result = await esbuild.build({
            entryPoints: [configPath],
            entryNames: '[name].[hash]',
            outfile: outfilePath,
            sourcemap: true,
            platform: 'node',
            target: 'es2019',
            format: 'cjs',
            jsx: 'transform',
            bundle: true,
            logLevel: 'silent',
            metafile: true,
            absWorkingDir: projectDir,
            external: ['./node_modules/*'],
            banner: {
                js: `function stackbit_process_cwd_shim() { return "${projectDir}" }`
            },
            define: {
                __dirname: JSON.stringify(projectDir),
                __filename: JSON.stringify(configPath),
                'process.cwd': 'stackbit_process_cwd_shim'
            },
            watch: watch ? { onRebuild: onRebuildHandler(fileName, projectDir, callback, logger) } : false
        });
        const configResult = await getConfigFromResult(result, fileName, projectDir, logger);
        return {
            ...configResult,
            stop: () => {
                var _a;
                if (stopped) {
                    return;
                }
                stopped = true;
                (_a = result.stop) === null || _a === void 0 ? void 0 : _a.call(result);
            },
            reload: async () => {
                const res = await loadStackbitConfigFromJs({
                    configPath,
                    logger,
                    outDir
                });
                callback === null || callback === void 0 ? void 0 : callback(res);
            }
        };
    }
    catch (error) {
        return {
            config: null,
            error: new config_errors_1.ConfigLoadError(`Error loading Stackbit configuration: ${error.message}`, { originalError: error }),
            stop: lodash_1.default.noop
        };
    }
}
exports.loadStackbitConfigFromJs = loadStackbitConfigFromJs;
function onRebuildHandler(fileName, projectDir, callback, logger) {
    return async (error, result) => {
        logger === null || logger === void 0 ? void 0 : logger.debug(`${fileName} was changed and rebuilt`);
        if (error) {
            callback === null || callback === void 0 ? void 0 : callback({
                config: null,
                error: new config_errors_1.ConfigLoadError(`Error loading Stackbit configuration from ${fileName}: ${error.message}`, {
                    originalError: error
                })
            });
        }
        else if (result) {
            const configResult = await getConfigFromResult(result, fileName, projectDir, logger);
            try {
                callback === null || callback === void 0 ? void 0 : callback(configResult);
            }
            catch (error) {
                logger === null || logger === void 0 ? void 0 : logger.debug(`error loading stackbit config callback, error: ${error.message}`);
            }
        }
    };
}
async function getConfigFromResult(result, fileName, projectDir, logger) {
    try {
        // TODO: if the loaded code has error it will provide sourcemaps;
        // (await import('source-map-support')).install()
        const importFresh = (modulePath) => {
            const resolvedModulePath = require.resolve(modulePath);
            delete require.cache[resolvedModulePath];
            return require(resolvedModulePath);
        };
        // TODO: consider making this a separate package that compiles to mjs and use dynamic import
        // NOTES:
        // 1) `?x=` suffix needed in case of re-loading when watching the config file for changes
        // 2) `file://` prefix is needed for Windows to work properly
        // const importFresh = async (modulePath: string) => import(`file://${modulePath}?x=${new Date()}`);
        const inputFile = Object.keys(result.metafile.inputs).find((inputFilePath) => inputFilePath.match(/stackbit\.config\.[^.]+$/) !== null);
        const outfilePath = Object.keys(result.metafile.outputs).find((outputFilePath) => outputFilePath.match(/stackbit\.config\.[^.]+\.cjs$/) !== null);
        const absOutputFilePath = path.join(projectDir, outfilePath);
        logger === null || logger === void 0 ? void 0 : logger.debug(`loading compiled ${fileName} from ${outfilePath}`);
        const exports = importFresh(absOutputFilePath);
        if ('__esModule' in exports && exports.__esModule) {
            if (!('default' in exports)) {
                return {
                    config: null,
                    error: new config_errors_1.ConfigLoadError(`Error loading Stackbit configuration, no default export found in ${fileName}`)
                };
            }
            return {
                config: exports.default,
                error: null
            };
        }
        return {
            config: exports,
            error: null
        };
    }
    catch (error) {
        return {
            config: null,
            error: new config_errors_1.ConfigLoadError(`Error loading Stackbit configuration from ${fileName}: ${error.message}`, { originalError: error })
        };
    }
}
//# sourceMappingURL=config-loader-esbuild.js.map