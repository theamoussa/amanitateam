import { StackbitConfig } from '@stackbit/types';
import { ConfigLoadError, ModelLoadError, ConfigValidationError, StackbitConfigNotFoundError } from './config-errors';
import { Config, Model } from './config-types';
export declare const STACKBIT_CONFIG_YAML_FILES: string[];
export declare const STACKBIT_CONFIG_JS_FILES: string[];
export declare const STACKBIT_CONFIG_FILES: string[];
export declare const LATEST_STACKBIT_VERSION = "0.5.0";
export declare type LoadStackbitConfigResult = {
    config: StackbitConfig;
    error: null;
} | {
    config: null;
    error: ConfigLoadError | StackbitConfigNotFoundError;
};
export declare type StopConfigWatch = {
    stop?: () => void;
    reload?: () => void;
};
export declare type LoadStackbitConfigResultWithStop = LoadStackbitConfigResult & StopConfigWatch;
export declare function loadStackbitYamlFromDir(dirPath: string): Promise<LoadStackbitConfigResult>;
export declare function loadConfigFromStackbitYaml(stackbitYamlPath: string): Promise<LoadStackbitConfigResult>;
export declare function findStackbitConfigFile(dirs: string[]): Promise<string | null>;
export declare function isStackbitYamlFile(filePath: string): boolean;
export declare function convertToYamlConfig({ config }: {
    config: Config;
}): StackbitConfig;
export declare function loadYamlModelsFromFiles(config: Config): Promise<{
    models: Model[];
    errors: ModelLoadError[];
}>;
export declare function getYamlModelDirs(config: Config): string[];
export declare function mergeConfigModelsWithModelsFromFiles(configModels: Model[], modelsFromFiles: Model[]): {
    models: Model[];
    errors: ConfigValidationError[];
};
//# sourceMappingURL=config-loader-utils.d.ts.map