/**
 * Stackbit Field Types
 */
import { STYLE_PROPS } from './consts';
export declare type Field = FieldBasic | FieldEnum | FieldImage | FieldNumber | FieldObject | FieldModel | FieldReference | FieldCrossReference | FieldStyle | FieldList;
export declare type DistributeFieldsExtension<Type extends Field> = Type extends {
    type: 'object';
} ? Partial<Omit<Type, 'name' | 'fields'>> & {
    name: string;
    fields?: DistributeFieldsExtension<Field>[];
} : Type extends {
    type: 'list';
} ? Partial<Omit<Type, 'name' | 'items'>> & {
    name: string;
    items?: DistributePartialListItems<FieldListItems>;
} : Type extends {
    type: 'style';
} ? Type : Type extends {
    type: 'cross-reference';
} ? Type : Partial<Omit<Type, 'name'>> & {
    name: string;
};
export declare type DistributePartialListItems<Type extends FieldListItems> = Type extends {
    type: 'object';
} ? Partial<Omit<Type, 'fields'>> & {
    fields?: DistributeFieldsExtension<Field>[];
} : Type extends {
    type: 'cross-reference';
} ? Type : Partial<Type>;
export declare type FieldExtension = DistributeFieldsExtension<Field>;
export declare type FieldType = Field['type'];
export declare type FieldSpecificProps = FieldBasicProps | FieldEnumProps | FieldImageProps | FieldNumberProps | FieldObjectProps | FieldModelProps | FieldReferenceProps | FieldCrossReferenceProps | FieldStyleProps | FieldListProps;
declare type ExtractByType<Union extends {
    type: FieldType;
}, Type extends FieldType> = Union extends {
    type: Type;
} ? Union : never;
export declare type FieldForType<Type extends FieldType> = ExtractByType<Field, Type>;
export declare type FieldSpecificPropsForType<Type extends FieldType> = ExtractByType<FieldSpecificProps, Type>;
export declare type FieldSpecificPropsForField<Type extends Field> = ExtractByType<FieldSpecificProps, Type['type']>;
export declare type FieldBasic = FieldCommonProps & FieldBasicProps;
export declare type FieldEnum = FieldCommonProps & FieldEnumProps;
export declare type FieldImage = FieldCommonProps & FieldImageProps;
export declare type FieldNumber = FieldCommonProps & FieldNumberProps;
export declare type FieldObject = FieldCommonProps & FieldObjectProps;
export declare type FieldModel = FieldCommonProps & FieldModelProps;
export declare type FieldReference = FieldCommonProps & FieldReferenceProps;
export declare type FieldCrossReference = FieldCommonProps & FieldCrossReferenceProps;
export declare type FieldStyle = FieldCommonProps & FieldStyleProps;
export declare type FieldList = FieldCommonProps & FieldListProps;
export declare type FieldListObject = FieldCommonProps & FieldListItemsObjectProps;
export declare type FieldListModel = FieldCommonProps & FieldListItemsModelProps;
export declare type FieldListReference = FieldCommonProps & FieldListItemsReferenceProps;
export declare type FieldListCrossReference = FieldCommonProps & FieldListItemsCrossReferenceProps;
export interface FieldCommonProps {
    name: string;
    label?: string;
    description?: string;
    required?: boolean;
    default?: unknown;
    group?: string;
    const?: unknown;
    hidden?: boolean;
    readOnly?: boolean;
    localized?: boolean;
}
export interface FieldBasicProps {
    type: 'string' | 'url' | 'slug' | 'text' | 'markdown' | 'html' | 'boolean' | 'date' | 'datetime' | 'color' | 'file' | 'json' | 'richText';
}
export declare type FieldEnumProps = FieldEnumDropdownProps | FieldEnumThumbnailsProps | FieldEnumPaletteProps | FieldEnumPaletteColorsProps;
export interface FieldEnumDropdownProps {
    type: 'enum';
    controlType?: 'dropdown' | 'button-group';
    options: FieldEnumOptionValue[] | FieldEnumOptionObject[];
}
export interface FieldEnumThumbnailsProps {
    type: 'enum';
    controlType: 'thumbnails';
    options: FieldEnumOptionThumbnails[];
}
export interface FieldEnumPaletteProps {
    type: 'enum';
    controlType: 'palette';
    options: FieldEnumOptionPalette[];
}
export interface FieldEnumPaletteColorsProps {
    type: 'enum';
    controlType: 'palette-colors';
    options: FieldEnumOptionPaletteColors[];
}
export declare type FieldEnumOptionValue = string | number;
export interface FieldEnumOptionObject {
    label: string;
    value: FieldEnumOptionValue;
}
export interface FieldEnumOptionThumbnails extends FieldEnumOptionObject {
    thumbnail: string;
}
export interface FieldEnumOptionPalette extends FieldEnumOptionObject {
    textColor?: string;
    backgroundColor?: string;
    borderColor?: string;
}
export interface FieldEnumOptionPaletteColors extends FieldEnumOptionObject {
    colors: string[];
}
export interface FieldImageProps {
    type: 'image';
    source?: string;
}
export interface FieldNumberProps {
    type: 'number';
    controlType?: 'slider';
    subtype?: 'int' | 'float';
    min?: number;
    max?: number;
    step?: number;
    unit?: string;
}
export interface FieldObjectProps {
    type: 'object';
    labelField?: string;
    thumbnail?: string;
    variantField?: string;
    fieldGroups?: FieldGroupItem[];
    fields: Field[];
}
export interface FieldGroupItem {
    name: string;
    label: string;
    icon?: string;
}
export interface FieldModelProps {
    type: 'model';
    models: string[];
    groups?: string[];
}
export interface FieldReferenceProps {
    type: 'reference';
    models: string[];
    groups?: string[];
}
export interface FieldCrossReferenceProps {
    type: 'cross-reference';
    models: FieldCrossReferenceModel[];
}
export interface FieldCrossReferenceModel {
    modelName: string;
    srcType?: string;
    srcProjectId?: string;
}
export declare type StyleProps = typeof STYLE_PROPS[number];
export interface FieldStyleProps {
    type: 'style';
    styles: Record<string, Partial<Record<StyleProps, any>>>;
}
export declare type FieldListProps = FieldListItemsBasicProps | FieldListItemsEnumProps | FieldListItemsImageProps | FieldListItemsNumberProps | FieldListItemsObjectProps | FieldListItemsModelProps | FieldListItemsReferenceProps | FieldListItemsCrossReferenceProps;
export declare type FieldListItems = FieldListProps['items'];
export interface FieldListCommonProps {
    type: 'list';
}
export interface FieldListItemsBasicProps extends FieldListCommonProps {
    items: FieldBasicProps;
}
export interface FieldListItemsEnumProps extends FieldListCommonProps {
    items: FieldEnumProps;
    controlType?: 'checkbox';
}
export interface FieldListItemsImageProps extends FieldListCommonProps {
    items: FieldImageProps;
}
export interface FieldListItemsNumberProps extends FieldListCommonProps {
    items: FieldNumberProps;
}
export interface FieldListItemsObjectProps extends FieldListCommonProps {
    items: FieldObjectProps;
}
export interface FieldListItemsModelProps extends FieldListCommonProps {
    items: FieldModelProps;
}
export interface FieldListItemsReferenceProps extends FieldListCommonProps {
    items: FieldReferenceProps;
}
export interface FieldListItemsCrossReferenceProps extends FieldListCommonProps {
    items: FieldCrossReferenceProps;
}
export {};
//# sourceMappingURL=model-fields.d.ts.map