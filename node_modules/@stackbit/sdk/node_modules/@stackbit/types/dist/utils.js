"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defineStackbitConfig = exports.isDocumentFieldOneOfFieldTypes = exports.isModelFieldOneOfFieldTypes = exports.isOneOfFieldTypes = exports.getLocalizedFieldForLocale = exports.isLocalizedField = void 0;
function isLocalizedField(field) {
    return !!field.localized;
}
exports.isLocalizedField = isLocalizedField;
/**
 * Returns non-localized version of a DocumentField for the provided `locale`.
 * If the `field` is localized, and the provided locale is not present, returns
 * null. If the `field` is not localized returns the `field` as-is ignoring the
 * `locale`.
 *
 * @example Passing localized field
 * getLocalizedFieldForLocale({
 *   type: 'string',
 *   localized: true,
 *   locales: {
 *       en-US: { value: 'Hello' },
 *       es-ES: { value: 'Hola' },
 *       fr-FR: { value: 'Bonjour' }
 *   }
 * }, 'es-ES');
 * returns:
 * {
 *   type: 'string',
 *   value: 'Hola'
 * }
 *
 * @example Passing non-localized field
 * getLocalizedFieldForLocale({
 *   type: 'string',
 *   value: 'Hello'
 * });
 * returns:
 * {
 *   type: 'string',
 *   value: 'Hello'
 * }
 *
 * @param field
 * @param locale
 */
function getLocalizedFieldForLocale(field, locale) {
    if (field.localized) {
        if (!locale) {
            return null;
        }
        const { localized, locales, ...base } = field;
        const localizedField = locales[locale];
        if (!localizedField) {
            return null;
        }
        return {
            ...base,
            ...localizedField
        };
    }
    else {
        return field;
    }
}
exports.getLocalizedFieldForLocale = getLocalizedFieldForLocale;
function isOneOfFieldTypes(fieldType, fieldTypes) {
    return fieldTypes.includes(fieldType);
}
exports.isOneOfFieldTypes = isOneOfFieldTypes;
function isModelFieldOneOfFieldTypes(modelField, fieldTypes) {
    return fieldTypes.includes(modelField.type);
}
exports.isModelFieldOneOfFieldTypes = isModelFieldOneOfFieldTypes;
function isDocumentFieldOneOfFieldTypes(documentField, fieldTypes) {
    return fieldTypes.includes(documentField.type);
}
exports.isDocumentFieldOneOfFieldTypes = isDocumentFieldOneOfFieldTypes;
function defineStackbitConfig(stackbitConfig) {
    return stackbitConfig;
}
exports.defineStackbitConfig = defineStackbitConfig;
//# sourceMappingURL=utils.js.map