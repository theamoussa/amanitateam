import { FieldType, StyleProps } from './model-fields';
export declare type DocumentField = DocumentStringLikeField | DocumentNumberField | DocumentBooleanField | DocumentJsonField | DocumentStyleField | DocumentRichTextField | DocumentImageField | DocumentObjectField | DocumentModelField | DocumentReferenceField | DocumentCrossReferenceField | DocumentListField;
export declare type DocumentFieldNonLocalized = DocumentStringLikeFieldNonLocalized | DocumentNumberFieldNonLocalized | DocumentBooleanFieldNonLocalized | DocumentJsonFieldNonLocalized | DocumentStyleFieldNonLocalized | DocumentRichTextFieldNonLocalized | DocumentImageFieldNonLocalized | DocumentObjectFieldNonLocalized | DocumentModelFieldNonLocalized | DocumentReferenceFieldNonLocalized | DocumentCrossReferenceFieldNonLocalized | DocumentListFieldNonLocalized;
export declare type DocumentFieldLocalized = DocumentStringLikeFieldLocalized | DocumentNumberFieldLocalized | DocumentBooleanFieldLocalized | DocumentJsonFieldLocalized | DocumentStyleFieldLocalized | DocumentRichTextFieldLocalized | DocumentImageFieldLocalized | DocumentObjectFieldLocalized | DocumentModelFieldLocalized | DocumentReferenceFieldLocalized | DocumentCrossReferenceFieldLocalized | DocumentListFieldLocalized;
export declare type DocumentFieldBaseProps = DocumentFieldBasePropsForDocumentField<DocumentField>;
export declare type DocumentFieldSpecificProps = DocumentFieldSpecificPropsForDocumentField<DocumentFieldLocalized>;
export declare type ExtractByType<Union extends {
    type: FieldType;
}, Type extends FieldType> = Union extends {
    type: Type;
} ? Union : never;
export declare type DocumentFieldForType<Type extends FieldType> = ExtractByType<DocumentField, Type>;
export declare type DocumentFieldNonLocalizedForType<Type extends FieldType> = ExtractByType<DocumentFieldNonLocalized, Type>;
export declare type DocumentFieldLocalizedForType<Type extends FieldType> = ExtractByType<DocumentFieldLocalized, Type>;
export declare type DocumentFieldBasePropsForType<Type extends FieldType> = ExtractByType<DocumentFieldBaseProps, Type>;
export declare type DocumentFieldBasePropsForDocumentField<DocField extends DocumentField> = DocField extends {
    localized?: false;
} ? Omit<DocField, keyof DocumentFieldSpecificPropsForDocumentField<DocumentFieldLocalizedForType<DocField['type']>> | 'localized'> : never;
export declare type DocumentFieldSpecificPropsForDocumentField<DocField extends DocumentFieldLocalized> = DocField extends {
    locales: Record<string, infer Props>;
} ? Omit<Props, 'locale'> : never;
export declare type DocumentStringLikeFieldTypes = 'string' | 'url' | 'slug' | 'text' | 'markdown' | 'html' | 'enum' | 'date' | 'datetime' | 'color' | 'file';
export declare type DocumentStringLikeField = DocumentStringLikeFieldForType<DocumentStringLikeFieldTypes>;
export declare type DocumentStringLikeFieldNonLocalized = DistributeDocumentStringLikeFieldNonLocalized<DocumentStringLikeFieldTypes>;
export declare type DocumentStringLikeFieldLocalized = DistributeDocumentStringFieldLocalized<DocumentStringLikeFieldTypes>;
export declare type DocumentStringLikeFieldForType<Type> = Type extends DocumentStringLikeFieldTypes ? DocumentStringLikeFieldNonLocalizedForType<Type> | DocumentStringLikeFieldLocalizedForType<Type> : never;
export declare type DistributeDocumentStringLikeFieldNonLocalized<Type> = Type extends DocumentStringLikeFieldTypes ? DocumentStringLikeFieldNonLocalizedForType<Type> : never;
export declare type DistributeDocumentStringFieldLocalized<Type> = Type extends DocumentStringLikeFieldTypes ? DocumentStringLikeFieldLocalizedForType<Type> : never;
export interface DocumentStringLikeFieldNonLocalizedForType<Type extends DocumentStringLikeFieldTypes> {
    type: Type;
    localized?: false;
    value: string;
}
export interface DocumentStringLikeFieldLocalizedForType<Type extends DocumentStringLikeFieldTypes> {
    type: Type;
    localized: true;
    locales: Record<string, {
        locale: string;
        value: string;
    }>;
}
export declare type DocumentNumberField = DocumentNumberFieldNonLocalized | DocumentNumberFieldLocalized;
export interface DocumentNumberFieldNonLocalized {
    type: 'number';
    localized?: false;
    value: number;
}
export interface DocumentNumberFieldLocalized {
    type: 'number';
    localized: true;
    locales: Record<string, {
        locale: string;
        value: number;
    }>;
}
export declare type DocumentBooleanField = DocumentBooleanFieldNonLocalized | DocumentBooleanFieldLocalized;
export interface DocumentBooleanFieldNonLocalized {
    type: 'boolean';
    localized?: false;
    value: boolean;
}
export interface DocumentBooleanFieldLocalized {
    type: 'boolean';
    localized: true;
    locales: Record<string, {
        locale: string;
        value: boolean;
    }>;
}
export declare type DocumentStyleField = DocumentStyleFieldNonLocalized | DocumentStyleFieldLocalized;
export declare type DocumentStyleFieldValue = Record<string, Partial<Record<StyleProps, any>>>;
export interface DocumentStyleFieldNonLocalized {
    type: 'style';
    localized?: false;
    value: DocumentStyleFieldValue;
}
export interface DocumentStyleFieldLocalized {
    type: 'style';
    localized: true;
    locales: Record<string, {
        locale: string;
        value: DocumentStyleFieldValue;
    }>;
}
export declare type DocumentJsonField = DocumentJsonFieldNonLocalized | DocumentJsonFieldLocalized;
export interface DocumentJsonFieldNonLocalized {
    type: 'json';
    localized?: false;
    value: any;
}
export interface DocumentJsonFieldLocalized {
    type: 'json';
    localized: true;
    locales: Record<string, {
        locale: string;
        value: any;
    }>;
}
export declare type DocumentRichTextField = DocumentRichTextFieldNonLocalized | DocumentRichTextFieldLocalized;
export declare type DocumentRichTextFieldValue = any;
export interface DocumentRichTextFieldNonLocalized {
    type: 'richText';
    localized?: false;
    value: DocumentRichTextFieldValue;
    hint?: string;
}
export interface DocumentRichTextFieldLocalized {
    type: 'richText';
    localized: true;
    locales: Record<string, {
        locale: string;
        value: DocumentRichTextFieldValue;
        hint?: string;
    }>;
}
export declare type DocumentImageField = DocumentImageFieldNonLocalized | DocumentImageFieldLocalized;
export interface DocumentImageFieldNonLocalized {
    type: 'image';
    localized?: false;
    source?: string;
    sourceData?: any;
    fields: {
        title: DocumentStringLikeFieldForType<'string'>;
        url: DocumentStringLikeFieldForType<'string'>;
    };
}
export interface DocumentImageFieldLocalized {
    type: 'image';
    localized: true;
    source?: string;
    sourceData?: any;
    locales: Record<string, {
        locale: string;
        fields: {
            title: DocumentStringLikeFieldForType<'string'>;
            url: DocumentStringLikeFieldForType<'string'>;
        };
    }>;
}
export declare type DocumentObjectField = DocumentObjectFieldNonLocalized | DocumentObjectFieldLocalized;
export interface DocumentObjectFieldNonLocalized {
    type: 'object';
    localized?: false;
    fields: Record<string, DocumentField>;
}
export interface DocumentObjectFieldLocalized {
    type: 'object';
    localized: true;
    locales: Record<string, {
        locale: string;
        fields: Record<string, DocumentField>;
    }>;
}
export declare type DocumentModelField = DocumentModelFieldNonLocalized | DocumentModelFieldLocalized;
export interface DocumentModelFieldNonLocalized {
    type: 'model';
    localized?: false;
    modelName: string;
    fields: Record<string, DocumentField>;
}
export interface DocumentModelFieldLocalized {
    type: 'model';
    localized: true;
    locales: Record<string, {
        locale: string;
        modelName: string;
        fields: Record<string, DocumentField>;
    }>;
}
export declare type DocumentReferenceField = DocumentReferenceFieldNonLocalized | DocumentReferenceFieldLocalized;
export interface DocumentReferenceFieldNonLocalized {
    type: 'reference';
    refType: 'document' | 'asset';
    localized?: false;
    refId: string;
}
export interface DocumentReferenceFieldLocalized {
    type: 'reference';
    refType: 'document' | 'asset';
    localized: true;
    locales: Record<string, {
        locale: string;
        refId: string;
    }>;
}
export declare type DocumentCrossReferenceField = DocumentCrossReferenceFieldNonLocalized | DocumentCrossReferenceFieldLocalized;
export interface DocumentCrossReferenceFieldNonLocalized {
    type: 'cross-reference';
    refType: 'document' | 'asset';
    localized?: false;
    refId: string;
    refSrcType: string;
    refProjectId: string;
}
export interface DocumentCrossReferenceFieldLocalized {
    type: 'cross-reference';
    refType: 'document' | 'asset';
    localized: true;
    locales: Record<string, {
        locale: string;
        refId: string;
        refSrcType: string;
        refProjectId: string;
    }>;
}
export declare type DocumentListField = DocumentListFieldNonLocalized | DocumentListFieldLocalized;
export declare type DocumentListFieldItems = Exclude<DocumentFieldNonLocalized, DocumentListFieldNonLocalized>;
export interface DocumentListFieldNonLocalized {
    type: 'list';
    localized?: false;
    items: DocumentListFieldItems[];
}
export interface DocumentListFieldLocalized {
    type: 'list';
    localized: true;
    locales: Record<string, {
        locale: string;
        items: DocumentListFieldItems[];
    }>;
}
//# sourceMappingURL=content-source-document-fields.d.ts.map