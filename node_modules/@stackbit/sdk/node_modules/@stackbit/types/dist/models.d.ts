/**
 * Stackbit Model Types
 */
import type { Field, FieldExtension, FieldGroupItem } from './model-fields';
export declare type Model = ObjectModel | DataModel | PageModel | ConfigModel;
export declare type ModelWithSource = Model & {
    srcType: string;
    srcProjectId: string;
};
export declare type NamelessModelMap = Record<string, NamelessModel>;
export declare type NamelessModel = DistributeNamelessModels<Model>;
export declare type DistributeNamelessModels<Type extends Model> = Type extends Model ? Omit<Type, 'name'> : never;
export declare type DistributeModelExtensions<Type extends Model> = Type extends Model ? Partial<Omit<Type, 'name' | 'fields'>> & {
    name: string;
    fields?: FieldExtension[];
} & {
    srcType?: string;
    srcProjectId?: string;
} : never;
export declare type ModelExtension = DistributeModelExtensions<Model>;
export interface ModelCommonFields {
    name: string;
    label?: string;
    description?: string;
    thumbnail?: string;
    /** @deprecated */
    extends?: string | string[];
    readOnly?: boolean;
    localized?: boolean;
    labelField?: string;
    /** @deprecated */
    variantField?: string;
    groups?: string[];
    fieldGroups?: FieldGroupItem[];
    fields?: Field[];
}
export interface ModelMatchFields {
    singleInstance?: boolean;
    file?: string;
    folder?: string;
    match?: string | string[];
    exclude?: string | string[];
}
export interface ObjectModel extends ModelCommonFields {
    type: 'object';
}
/** @deprecated */
export interface ConfigModel extends ModelCommonFields {
    type: 'config';
    file?: string;
}
export interface PageModel extends ModelCommonFields, ModelMatchFields {
    type: 'page';
    layout?: string;
    urlPath?: string;
    filePath?: string;
    hideContent?: boolean;
}
export interface DataModel extends ModelCommonFields, ModelMatchFields {
    type: 'data';
    filePath?: string;
}
//# sourceMappingURL=models.d.ts.map