import type { ContentSourceInterface } from './content-source';
import type { DocumentWithSource } from './content-source-document';
import type { ModelExtension, ModelMatchFields, ModelWithSource, NamelessModelMap } from './models';
import { SSG_NAMES, CMS_NAMES } from './consts';
import { SidebarButton } from './sidebar-button';

export interface StackbitConfig {
    /**
     * Specifies Stackbit configuration version
     */
    stackbitVersion: string;

    /**
     * The front-end framework name
     */
    ssgName?: typeof SSG_NAMES[number];

    /**
     * Specifies the version of static site generator.
     * Useful for Hugo to pre-install the matching Hugo binary version.
     */
    ssgVersion?: string;

    /**
     * The Node.js version to use when installing dependencies and running the
     * front-end framework
     */
    nodeVersion?: string;

    postGitCloneCommand?: string;
    preInstallCommand?: string;
    postInstallCommand?: string;
    devCommand?: string;

    /** @deprecated Use `contentSources` instead */
    cmsName?: typeof CMS_NAMES[number];

    import?: Import;
    buildCommand?: string;
    publishDir?: string;

    /** To be moved to Git Content Source */
    staticDir?: string;
    uploadDir?: string;
    assets?: Assets;
    pagesDir?: string | null;
    dataDir?: string | null;
    pageLayoutKey?: string | null;
    objectTypeKey?: string;
    excludePages?: string | string[];

    styleObjectModelName?: string | null;
    presetSource?: PresetSource;

    /** @deprecated */
    logicFields?: string[];
    /** @deprecated use `mapModels` function or `modelExtensions` property instead */
    contentModels?: ContentModelMap;
    /** @deprecated ise `contentSources` instead */
    modelsSource?: ModelsSource;

    sidebarButtons?: SidebarButton[];
    siteMap?: (options: { documents: DocumentWithSource[]; models: ModelWithSource[] }) => SiteMapEntry[];

    presetReferenceBehavior?: 'copyReference' | 'duplicateContents';
    nonDuplicatableModels?: string[];
    duplicatableModels?: string[];

    customContentReload?: boolean;
    experimental?: Experimental;

    contentSources?: ContentSourceInterface<any, any, any>[];
    mapModels?: (options: { models: ModelWithSource[] }) => ModelWithSource[];
    mapDocuments?: (options: { documents: DocumentWithSource[]; models: ModelWithSource[] }) => DocumentWithSource[];
    modelExtensions?: ModelExtension[];

    /** @deprecated */
    models?: NamelessModelMap;
    /** @deprecated */
    noEncodeFields?: string[];
    /** @deprecated */
    omitFields?: string[];
    /** @deprecated */
    encodedFieldTypes?: string[];
}

export type Import = ContentfulImport | SanityImport;

export interface ContentfulImport {
    type: 'contentful';
    contentFile: string;
    uploadAssets?: boolean;
    assetsDirectory?: string;
    spaceIdEnvVar?: string;
    accessTokenEnvVar?: string;
    deliveryTokenEnvVar?: string;
    previewTokenEnvVar?: string;
}

export interface SanityImport {
    type: 'sanity';
    contentFile: string;
    sanityStudioPath: string;
    deployStudio?: boolean;
    deployGraphql?: boolean;
    projectIdEnvVar?: string;
    datasetEnvVar?: string;
    tokenEnvVar?: string;
}

export type Assets = StaticAssets | RelativeAssets;

export interface StaticAssets {
    referenceType: 'static';
    assetsDir?: string;
    staticDir: string;
    publicPath: string;
    uploadDir?: string;
}

export interface RelativeAssets {
    referenceType: 'relative';
    assetsDir: string;
    staticDir?: string;
    publicPath?: string;
    uploadDir?: string;
}

export type ContentModelMap = Record<string, ContentModel>;

export interface ContentModel extends ModelMatchFields {
    isPage?: boolean;
    urlPath?: string;
    hideContent?: boolean;
    newFilePath?: string;
}

export type PresetSource = PresetSourceFiles;

export interface PresetSourceFiles {
    type: 'files';
    presetDirs: string[];
}

export type ModelsSource = ModelsSourceFiles | ModelsSourceContentful | ModelsSourceSanity;

export interface ModelsSourceFiles {
    type: 'files';
    modelDirs: string[];
}

export interface ModelsSourceContentful {
    type: 'contentful';
    module?: string;
    [key: string]: any;
}

export interface ModelsSourceSanity {
    type: 'sanity';
    sanityStudioPath: string;
    module?: string;
    [key: string]: any;
}

export type SiteMapEntry = SiteMapBaseEntry | SiteMapDocumentEntry;

export interface SiteMapBaseEntry {
    /** The URL path of a page */
    urlPath: string;
    /**
     * The human readable string describing a page.
     *
     * When used with `document`, the `label` can be omitted, in which case it
     * will be computed using the document model's `labelField` property.
     */
    label: string;
    /**
     * A stable ID that uniquely and consistently represents a website page.
     * If the `urlPath` of a particular page has changed, its stableId must
     * remain the same. The `stableId` allows Stackbit to redirect editors to
     * a different URL when the `urlPath` of the currently viewed page has been
     * changed. For example, one document can represent multiple website pages
     * if it has field-level localization. In this case, the srcDocumentId of
     * both sitemap entries should be the same, however the stableId must be
     * different.
     *
     * When used with `document`, the `stableId` can be omitted, in which case
     * it will be set to document's `id`.
     */
    stableId: string;
    /** The locale of the page */
    locale?: string;
    isHomePage?: boolean;
}

export interface SiteMapDocumentEntry extends Omit<SiteMapBaseEntry, 'label' | 'stableId'> {
    label?: string;
    stableId?: string;
    document: {
        srcType: string;
        srcProjectId: string;
        modelName: string;
        id: string;
    };
}

export interface Experimental {
    ssg?: {
        name?: string;
        passthrough?: string[];
        directRoutes?: Record<string, string>;
        watch?: {
            reinstallPackages?: string[];
        };
        logPatterns?: {
            up?: string[];
        };
    };
}
