/**
 * Stackbit Model Types
 */

import type { Field, FieldExtension, FieldGroupItem } from './model-fields';

export type Model = ObjectModel | DataModel | PageModel | ConfigModel;
export type ModelWithSource = Model & { srcType: string; srcProjectId: string };

export type NamelessModelMap = Record<string, NamelessModel>;
export type NamelessModel = DistributeNamelessModels<Model>;
export type DistributeNamelessModels<Type extends Model> = Type extends Model ? Omit<Type, 'name'> : never;

// Convert all models to have all their properties to be optional except the 'name', and add 'srcType' and 'srcProjectId' properties
// prettier-ignore
export type DistributeModelExtensions<Type extends Model> =
    Type extends Model
        ? Partial<Omit<Type, 'name' | 'fields'>>
            & { name: string; fields?: FieldExtension[] }
            & { srcType?: string; srcProjectId?: string; }
        : never;

export type ModelExtension = DistributeModelExtensions<Model>;

export interface ModelCommonFields {
    name: string;
    label?: string;
    description?: string;
    thumbnail?: string;
    /** @deprecated */
    extends?: string | string[];
    readOnly?: boolean;
    localized?: boolean;
    labelField?: string;
    /** @deprecated */
    variantField?: string;
    groups?: string[];
    fieldGroups?: FieldGroupItem[];
    fields?: Field[];
}

export interface ModelMatchFields {
    singleInstance?: boolean;
    file?: string;
    folder?: string;
    match?: string | string[];
    exclude?: string | string[];
}

export interface ObjectModel extends ModelCommonFields {
    type: 'object';
}

/** @deprecated */
export interface ConfigModel extends ModelCommonFields {
    type: 'config';
    file?: string;
}

export interface PageModel extends ModelCommonFields, ModelMatchFields {
    type: 'page';
    layout?: string;
    urlPath?: string;
    filePath?: string;
    hideContent?: boolean;
}

export interface DataModel extends ModelCommonFields, ModelMatchFields {
    type: 'data';
    filePath?: string;
}
