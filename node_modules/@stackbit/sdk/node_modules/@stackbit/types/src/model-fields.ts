/**
 * Stackbit Field Types
 */

import { STYLE_PROPS } from './consts';

export type Field =
    | FieldBasic
    | FieldEnum
    | FieldImage
    | FieldNumber
    | FieldObject
    | FieldModel
    | FieldReference
    | FieldCrossReference
    | FieldStyle
    | FieldList;

// Make all Field properties except the 'name' optional, including fields of nested objects and lists.
// prettier-ignore
export type DistributeFieldsExtension<Type extends Field> =
    Type extends { type: 'object' } ?
        Partial<Omit<Type, 'name' | 'fields'>> & { name: string; fields?: DistributeFieldsExtension<Field>[] } :
    Type extends { type: 'list' } ?
        Partial<Omit<Type, 'name' | 'items'>> & { name: string; items?: DistributePartialListItems<FieldListItems> } :
    // do not make style fields partial
    Type extends { type: 'style' } ? Type :
    // do not make cross-reference fields partial
    Type extends { type: 'cross-reference' } ? Type :
    Partial<Omit<Type, 'name'>> & { name: string };

// prettier-ignore
export type DistributePartialListItems<Type extends FieldListItems> =
    Type extends { type: 'object' } ?
        Partial<Omit<Type, 'fields'>> & { fields?: DistributeFieldsExtension<Field>[] } :
    // do not make cross-reference fields partial
    Type extends { type: 'cross-reference' } ? Type :
    Partial<Type>;

export type FieldExtension = DistributeFieldsExtension<Field>;

export type FieldType = Field['type'];

export type FieldSpecificProps =
    | FieldBasicProps
    | FieldEnumProps
    | FieldImageProps
    | FieldNumberProps
    | FieldObjectProps
    | FieldModelProps
    | FieldReferenceProps
    | FieldCrossReferenceProps
    | FieldStyleProps
    | FieldListProps;

type ExtractByType<Union extends { type: FieldType }, Type extends FieldType> = Union extends { type: Type }
    ? Union
    : never;
export type FieldForType<Type extends FieldType> = ExtractByType<Field, Type>;
export type FieldSpecificPropsForType<Type extends FieldType> = ExtractByType<FieldSpecificProps, Type>;
export type FieldSpecificPropsForField<Type extends Field> = ExtractByType<FieldSpecificProps, Type['type']>;

export type FieldBasic = FieldCommonProps & FieldBasicProps;
export type FieldEnum = FieldCommonProps & FieldEnumProps;
export type FieldImage = FieldCommonProps & FieldImageProps;
export type FieldNumber = FieldCommonProps & FieldNumberProps;
export type FieldObject = FieldCommonProps & FieldObjectProps;
export type FieldModel = FieldCommonProps & FieldModelProps;
export type FieldReference = FieldCommonProps & FieldReferenceProps;
export type FieldCrossReference = FieldCommonProps & FieldCrossReferenceProps;
export type FieldStyle = FieldCommonProps & FieldStyleProps;
export type FieldList = FieldCommonProps & FieldListProps;

export type FieldListObject = FieldCommonProps & FieldListItemsObjectProps;
export type FieldListModel = FieldCommonProps & FieldListItemsModelProps;
export type FieldListReference = FieldCommonProps & FieldListItemsReferenceProps;
export type FieldListCrossReference = FieldCommonProps & FieldListItemsCrossReferenceProps;

export interface FieldCommonProps {
    name: string;
    label?: string;
    description?: string;
    required?: boolean;
    default?: unknown;
    group?: string;
    const?: unknown;
    hidden?: boolean;
    readOnly?: boolean;
    localized?: boolean;
}

// export type FieldType = typeof FIELD_TYPES[number];

export interface FieldBasicProps {
    type:
        | 'string'
        | 'url'
        | 'slug'
        | 'text'
        | 'markdown'
        | 'html'
        | 'boolean'
        | 'date'
        | 'datetime'
        | 'color'
        | 'file'
        | 'json'
        | 'richText';
}

export type FieldEnumProps =
    | FieldEnumDropdownProps
    | FieldEnumThumbnailsProps
    | FieldEnumPaletteProps
    | FieldEnumPaletteColorsProps;

export interface FieldEnumDropdownProps {
    type: 'enum';
    controlType?: 'dropdown' | 'button-group';
    options: FieldEnumOptionValue[] | FieldEnumOptionObject[];
}

export interface FieldEnumThumbnailsProps {
    type: 'enum';
    controlType: 'thumbnails';
    options: FieldEnumOptionThumbnails[];
}

export interface FieldEnumPaletteProps {
    type: 'enum';
    controlType: 'palette';
    options: FieldEnumOptionPalette[];
}

export interface FieldEnumPaletteColorsProps {
    type: 'enum';
    controlType: 'palette-colors';
    options: FieldEnumOptionPaletteColors[];
}

export type FieldEnumOptionValue = string | number;

export interface FieldEnumOptionObject {
    label: string;
    value: FieldEnumOptionValue;
}

export interface FieldEnumOptionThumbnails extends FieldEnumOptionObject {
    thumbnail: string;
}

export interface FieldEnumOptionPalette extends FieldEnumOptionObject {
    textColor?: string;
    backgroundColor?: string;
    borderColor?: string;
}

export interface FieldEnumOptionPaletteColors extends FieldEnumOptionObject {
    colors: string[];
}

export interface FieldImageProps {
    type: 'image';
    source?: string;
}

export interface FieldNumberProps {
    type: 'number';
    controlType?: 'slider';
    subtype?: 'int' | 'float';
    min?: number;
    max?: number;
    step?: number;
    unit?: string;
}

export interface FieldObjectProps {
    type: 'object';
    labelField?: string;
    thumbnail?: string;
    variantField?: string;
    fieldGroups?: FieldGroupItem[];
    fields: Field[];
}

export interface FieldGroupItem {
    name: string;
    label: string;
    icon?: string;
}

export interface FieldModelProps {
    type: 'model';
    models: string[];
    groups?: string[];
}

export interface FieldReferenceProps {
    type: 'reference';
    models: string[];
    groups?: string[];
}

export interface FieldCrossReferenceProps {
    type: 'cross-reference';
    models: FieldCrossReferenceModel[];
}

export interface FieldCrossReferenceModel {
    modelName: string;
    srcType?: string;
    srcProjectId?: string;
}

export type StyleProps = typeof STYLE_PROPS[number];

export interface FieldStyleProps {
    type: 'style';
    styles: Record<string, Partial<Record<StyleProps, any>>>;
}

export type FieldListProps =
    | FieldListItemsBasicProps
    | FieldListItemsEnumProps
    | FieldListItemsImageProps
    | FieldListItemsNumberProps
    | FieldListItemsObjectProps
    | FieldListItemsModelProps
    | FieldListItemsReferenceProps
    | FieldListItemsCrossReferenceProps;

export type FieldListItems = FieldListProps['items'];

export interface FieldListCommonProps {
    type: 'list';
}

export interface FieldListItemsBasicProps extends FieldListCommonProps {
    items: FieldBasicProps;
}

export interface FieldListItemsEnumProps extends FieldListCommonProps {
    items: FieldEnumProps;
    controlType?: 'checkbox';
}

export interface FieldListItemsImageProps extends FieldListCommonProps {
    items: FieldImageProps;
}

export interface FieldListItemsNumberProps extends FieldListCommonProps {
    items: FieldNumberProps;
}

export interface FieldListItemsObjectProps extends FieldListCommonProps {
    items: FieldObjectProps;
}

export interface FieldListItemsModelProps extends FieldListCommonProps {
    items: FieldModelProps;
}

export interface FieldListItemsReferenceProps extends FieldListCommonProps {
    items: FieldReferenceProps;
}

export interface FieldListItemsCrossReferenceProps extends FieldListCommonProps {
    items: FieldCrossReferenceProps;
}
