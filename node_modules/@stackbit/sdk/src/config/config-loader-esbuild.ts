import * as esbuild from 'esbuild';
import * as path from 'path';
import * as fs from 'fs-extra';
import * as os from 'os';
import _ from 'lodash';

import { ConfigLoadError } from './config-errors';
import { LoadStackbitConfigResult, LoadStackbitConfigResultWithStop } from './config-loader-utils';

export async function loadStackbitConfigFromJs({
    configPath,
    watch,
    callback,
    logger,
    outDir
}: {
    configPath: string;
    watch?: boolean;
    callback?: (result: LoadStackbitConfigResult) => void;
    logger?: any;
    outDir?: string;
}): Promise<LoadStackbitConfigResultWithStop> {
    try {
        // resolve config relative to cwd if it is not absolute
        configPath = path.resolve(configPath);
        logger = logger?.createLogger({ label: 'config-loader-esbuilt' });
        logger?.debug(`building stackbit config from ${configPath}`);
        const projectDir = path.dirname(configPath);
        const fileName = path.basename(configPath);

        // clean previously cached files
        if (outDir) {
            await fs.emptyDir(outDir);
        }

        const tempDir = outDir ? path.resolve(projectDir, outDir) : await fs.mkdtemp(path.join(os.tmpdir(), 'stackbit-config-'));
        const outfilePath = path.join(tempDir, 'stackbit.config.cjs');
        let stopped = false;
        const result = await esbuild.build({
            entryPoints: [configPath],
            entryNames: '[name].[hash]',
            outfile: outfilePath,
            sourcemap: true,
            platform: 'node',
            target: 'es2019', // TODO: update container to node 16 and set this to es2020
            format: 'cjs',
            jsx: 'transform', // needed in case models are co-located with React components
            bundle: true,
            logLevel: 'silent',
            metafile: true,
            absWorkingDir: projectDir,
            external: ['./node_modules/*'],
            banner: {
                js: `function stackbit_process_cwd_shim() { return "${projectDir}" }`
            },
            define: {
                __dirname: JSON.stringify(projectDir),
                __filename: JSON.stringify(configPath),
                'process.cwd': 'stackbit_process_cwd_shim'
            },
            watch: watch ? { onRebuild: onRebuildHandler(fileName, projectDir, callback, logger) } : false
        });
        const configResult = await getConfigFromResult(result, fileName, projectDir, logger);
        return {
            ...configResult,
            stop: () => {
                if (stopped) {
                    return;
                }
                stopped = true;
                result.stop?.();
            },
            reload: async () => {
                const res = await loadStackbitConfigFromJs({
                    configPath,
                    logger,
                    outDir
                });
                callback?.(res);
            }
        };
    } catch (error: any) {
        return {
            config: null,
            error: new ConfigLoadError(`Error loading Stackbit configuration: ${error.message}`, { originalError: error }),
            stop: _.noop
        };
    }
}

function onRebuildHandler(fileName: string, projectDir: string, callback?: (result: LoadStackbitConfigResult) => void, logger?: any) {
    return async (error: esbuild.BuildFailure | null, result: esbuild.BuildResult | null) => {
        logger?.debug(`${fileName} was changed and rebuilt`);
        if (error) {
            callback?.({
                config: null,
                error: new ConfigLoadError(`Error loading Stackbit configuration from ${fileName}: ${error.message}`, {
                    originalError: error
                })
            });
        } else if (result) {
            const configResult = await getConfigFromResult(result, fileName, projectDir, logger);
            try {
                callback?.(configResult);
            } catch (error: any) {
                logger?.debug(`error loading stackbit config callback, error: ${error.message}`);
            }
        }
    };
}

async function getConfigFromResult(result: esbuild.BuildResult, fileName: string, projectDir: string, logger?: any): Promise<LoadStackbitConfigResult> {
    try {
        // TODO: if the loaded code has error it will provide sourcemaps;
        // (await import('source-map-support')).install()

        const importFresh = (modulePath: string) => {
            const resolvedModulePath = require.resolve(modulePath);
            delete require.cache[resolvedModulePath];
            return require(resolvedModulePath);
        };

        // TODO: consider making this a separate package that compiles to mjs and use dynamic import
        // NOTES:
        // 1) `?x=` suffix needed in case of re-loading when watching the config file for changes
        // 2) `file://` prefix is needed for Windows to work properly
        // const importFresh = async (modulePath: string) => import(`file://${modulePath}?x=${new Date()}`);

        const inputFile = Object.keys(result.metafile!.inputs).find((inputFilePath) => inputFilePath.match(/stackbit\.config\.[^.]+$/) !== null);
        const outfilePath = Object.keys(result.metafile!.outputs).find((outputFilePath) => outputFilePath.match(/stackbit\.config\.[^.]+\.cjs$/) !== null);
        const absOutputFilePath = path.join(projectDir, outfilePath!);

        logger?.debug(`loading compiled ${fileName} from ${outfilePath}`);

        const exports = importFresh(absOutputFilePath);

        if ('__esModule' in exports && exports.__esModule) {
            if (!('default' in exports)) {
                return {
                    config: null,
                    error: new ConfigLoadError(`Error loading Stackbit configuration, no default export found in ${fileName}`)
                };
            }
            return {
                config: exports.default,
                error: null
            };
        }
        return {
            config: exports,
            error: null
        };
    } catch (error: any) {
        return {
            config: null,
            error: new ConfigLoadError(`Error loading Stackbit configuration from ${fileName}: ${error.message}`, { originalError: error })
        };
    }
}
