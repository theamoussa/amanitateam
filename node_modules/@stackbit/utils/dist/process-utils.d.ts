/// <reference types="node" />
import { ChildProcessWithoutNullStreams } from 'child_process';
import { Logger } from './logger-types';
export declare type LogTarget = 'stdout' | 'stderr' | 'error';
export interface LogProcessOptions {
    onLog?: {
        callback: (name: string, target: LogTarget, line: string) => void;
        pattern: RegExp;
        target: LogTarget;
    }[];
    info?: Record<string, any>;
}
interface LogBufferHandler {
    handler: (target: LogTarget, data: string) => void;
    flush: () => void;
}
export declare function createLogBufferHandler(name: string, logger: Logger, { onLog, info }?: LogProcessOptions): LogBufferHandler;
export declare function logProcess(p: ChildProcessWithoutNullStreams, name: string, logger: Logger, options?: LogProcessOptions): void;
export declare function getProcessPromise(p: ChildProcessWithoutNullStreams): Promise<string>;
export {};
//# sourceMappingURL=process-utils.d.ts.map