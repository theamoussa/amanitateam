import { Entry, Asset } from 'contentful';
import { AssetProps, EntryProps } from 'contentful-management';
import { LazyPoller, LazyPollerOptions } from './lazy-poller';
export interface SyncPollerOptions extends LazyPollerOptions<SyncCallback> {
    spaceId: string;
    environment: string;
    accessToken: string;
    managementToken: string;
}
export interface SyncResult {
    entries: EntryProps<any>[];
    assets: AssetProps[];
    deletedEntries: Entry<any>[];
    deletedAssets: Asset[];
}
export type SyncCallback = (result: SyncResult) => void;
export declare class SyncPoller extends LazyPoller<SyncCallback> {
    private client;
    private managementClient;
    private nextSyncToken;
    constructor({ spaceId, environment, accessToken, managementToken, ...options }: SyncPollerOptions);
    poll(notificationCallback: SyncCallback): Promise<any>;
    private batchRefetchData;
}
//# sourceMappingURL=sync-poller.d.ts.map