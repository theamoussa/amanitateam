export = ContentfulEncoderDelegate;
declare class ContentfulEncoderDelegate {
    constructor({ schema, noEncodeFields, omitFields, encodedFieldTypes, defaultLocale, users }: {
        schema: any;
        noEncodeFields?: any[] | undefined;
        omitFields?: any[] | undefined;
        encodedFieldTypes?: null | undefined;
        defaultLocale?: string | undefined;
        users?: any[] | undefined;
    });
    schema: any;
    models: any;
    modelsByName: _.Dictionary<any>;
    noEncodeFields: any[];
    omitFields: any[];
    encodedFieldTypes: any;
    defaultLocale: string;
    users: any[];
    getModelsByName(): _.Dictionary<any>;
    getEncodedFieldTypes(): any;
    getNoEncodeFields(): any[];
    getItemId(item: any): any;
    getReferenceId(item: any): any;
    getItemType(item: any): any;
    getItemModelName(item: any): any;
    itemIsMultiLocale(item: any): boolean;
    getItemLocale(item: any): any;
    getModelForRootItem(rootItem: any): any;
    isLinkItem(item: any): boolean;
    getModelForItemOfReferenceType(item: any): any;
    getUserEmailById(userId: any): any;
    getItemMetadata(item: any, model: any): {
        type: string;
        isChanged: boolean;
        status: string;
        createdAt: any;
        createdBy: any;
        updatedAt: any;
        updatedBy: any[];
        srcType: string;
        srcProjectId: any;
        srcProjectUrl: string;
        srcEnvironment: any;
        srcObjectId: any;
        srcObjectUrl: string;
        srcObjectLabel: any;
        srcModelName: any;
        srcModelLabel: any;
        srcFieldNames: null;
    } | null;
    getItemLabelFieldValue(item: any, model: any): any;
    getItemFields(item: any, model: any): ({
        name: string;
        unset: boolean;
    } | {
        value: any;
        encodedDataPath: any[];
        locale: any;
        name: string;
        unset: boolean;
    } | {
        locales: {
            value: any;
            encodedDataPath: any[];
            locale: any;
        }[];
        name: string;
        unset: boolean;
    })[] | null;
    getFirstLocalizedFieldValue(field: any): any;
    getFirstFieldLocale(field: any): string | undefined;
    getFieldLocales(field: any): string[];
    encodeField(fieldValue: any, fieldModel: any): {
        encodedData: {
            nodeType: string;
            data: {};
            content: {
                nodeType: string;
                content: {
                    nodeType: string;
                    value: string;
                    marks: never[];
                    data: {};
                }[];
                data: {};
            }[];
        };
        encodedFieldPath: (string | number)[];
        fieldData: {
            hint: any;
            multiElement: boolean;
            value: any;
        };
    } | {
        fieldData: {
            isUnset: boolean;
            fields?: undefined;
            type?: undefined;
            refId?: undefined;
            refType?: undefined;
        };
    } | {
        fieldData: {
            fields: {
                title: {
                    type: string;
                    value: any;
                };
                url: {
                    type: string;
                    value: any;
                };
            };
            isUnset?: undefined;
            type?: undefined;
            refId?: undefined;
            refType?: undefined;
        };
    } | {
        fieldData: {
            type: string;
            refId: any;
            refType: string;
            isUnset?: undefined;
            fields?: undefined;
        };
    } | null;
    encodeRichText(fieldValue: any): {
        encodedData: {
            nodeType: string;
            data: {};
            content: {
                nodeType: string;
                content: {
                    nodeType: string;
                    value: string;
                    marks: never[];
                    data: {};
                }[];
                data: {};
            }[];
        };
        encodedFieldPath: (string | number)[];
        fieldData: {
            hint: any;
            multiElement: boolean;
            value: any;
        };
    };
    flattenRichText(node: any): any;
}
import _ = require("lodash");
//# sourceMappingURL=contentful-encoder-delegate.d.ts.map