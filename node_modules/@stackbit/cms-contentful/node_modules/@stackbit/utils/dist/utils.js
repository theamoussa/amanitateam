"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertFunctionWithFail = exports.failFunctionWithTag = exports.fieldPathToString = void 0;
const lodash_1 = __importDefault(require("lodash"));
function fieldPathToString(fieldPath) {
    return lodash_1.default.reduce(fieldPath, (accumulator, fieldName, index) => {
        if (lodash_1.default.isString(fieldName) && /\W/.test(fieldName)) {
            // field name is a string with non alphanumeric character
            accumulator += `['${fieldName}']`;
        }
        else if (lodash_1.default.isNumber(fieldName)) {
            accumulator += `[${fieldName}]`;
        }
        else {
            if (index > 0) {
                accumulator += '.';
            }
            accumulator += fieldName;
        }
        return accumulator;
    }, '');
}
exports.fieldPathToString = fieldPathToString;
function failFunctionWithTag(tag) {
    return function fail(message) {
        throw new Error(`[${tag}] ${message}`);
    };
}
exports.failFunctionWithTag = failFunctionWithTag;
function assertFunctionWithFail(fail) {
    return function assert(value, message) {
        if (!value) {
            fail(message);
        }
    };
}
exports.assertFunctionWithFail = assertFunctionWithFail;
//# sourceMappingURL=utils.js.map